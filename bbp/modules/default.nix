{
    pkgs
}:


let 
    isBlueGene = ((import ../../bluegene/portability.nix).isBlueGene == true);    

    conflicts-modules = [ "mvapich2" "mvapich2-psm-x86_64" "openmpi" "gcc" "mpich2" "virtualgl"  ];

    nix-target-prefix = if isBlueGene then "nix/bgq" else "nix";

    bgq-cross = pkg: if isBlueGene then pkg.crossDrv else pkg;

    bgq-is-gcc-module = if isBlueGene then "gcc47" else "";

    bgq-is-xlc-module = if isBlueGene then "xlc" else "";

    generic-modules = rec {

    default_mpi = if (pkgs.bbp-mpi == pkgs.mvapich2) then mvapich2
              else mpich2;

    default_mpi_rdma = if (pkgs.bbp-mpi-rdma == pkgs.mvapich2-rdma) then mvapich2-rdma
                      else null;


        ## hpc components
        mvdtool = pkgs.envModuleGen rec {
            name = "mvd-tool";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "MVD file format manipulation tool module generated by nix";
            packages = [
                            pkgs.mvdtool
                       ];
            conflicts = conflicts-modules;
        };  

        morpho-tool = pkgs.envModuleGen rec {
            name = "morpho-tool";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "morphology file format manipulation tool module generated by nix";
            packages = [
                            pkgs.morpho-tool
                       ];
            conflicts = conflicts-modules;
        }; 


        hpctools = pkgs.envModuleGen rec {
            name = "hpctools";
            moduleFilePrefix = "nix/hpc";
            
            isLibrary = true;
            description = "hpctools module generated by nix";
            packages = [
                            (pkgs.hpctools-xlc)
                       ];
            conflicts = conflicts-modules;
        };    

        functionalizer = pkgs.envModuleGen rec {
            name = "functionalizer";
            moduleFilePrefix = "nix/hpc";
            description = "functionalizer module generated by nix";
            packages = 
            [
                (pkgs.functionalizer)
                (pkgs.functionalizer).doc
            ];
            conflicts =  conflicts-modules;
        };

        touchdetector = pkgs.envModuleGen rec {
            name = "touchdetector";
            moduleFilePrefix = "nix/hpc";
            description = "touchdetector module generated by nix";
            packages = 
            [
                pkgs.touchdetector
                pkgs.touchdetector.doc
            ];
            conflicts = conflicts-modules;
        };   

        bluebuilder = pkgs.envModuleGen rec {
            name = "bluebuilder";
            moduleFilePrefix = "nix/hpc";
            
            description = "bluebuilder module generated by nix";
            packages = 
            [
                pkgs.bluebuilder
            ];
            conflicts = conflicts-modules;
        };

        neuron = pkgs.envModuleGen rec {
            name = "neuron";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;            
            description = "neuron module generated by nix";
            packages = 
            [
                pkgs.neuron             
                pkgs.neurodamus           
                pkgs.reportinglib
                pkgs.readline
                pkgs.ncurses  
            ];
                       
            extraContent = "setenv BBP_HOME $targetEnv/";
            
            conflicts = conflicts-modules;

            dependencies = [ gcc ];
        };

        coreneuron = pkgs.envModuleGen rec {
            name = "coreneuron";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;            
            description = "neuron module generated by nix";
            packages = [
                            pkgs.coreneuron
                            pkgs.neuron
                            pkgs.neurodamus-coreneuron
                            pkgs.reportinglib
                            pkgs.readline
                            pkgs.ncurses
                       ];

            extraContent = "setenv BBP_HOME $targetEnv/";
            
            conflicts = conflicts-modules;

            dependencies = [ gcc ];

        };      

        steps = pkgs.envModuleGen rec {
            name = "steps";
            moduleFilePrefix = "nix/hpc";
            
            isLibrary = true;            
            description = "steps module generated by nix";
            packages = [
                            pkgs.steps-mpi
                       ];
            
            conflicts = conflicts-modules;
        };  


        nest = pkgs.envModuleGen rec {
            name = "nest";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;            
            description = "nest module generated by nix";
            packages = [
                            pkgs.nest
                       ];
            
            conflicts = conflicts-modules;
        };

        cyme = pkgs.envModuleGen rec {
            name = "cyme";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;            
            description = "cyme module generated by nix";
            packages = [
                            pkgs.cyme
                       ];
            
            conflicts = conflicts-modules;
        };

        mod2c = pkgs.envModuleGen rec {
            name = "mod2c";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;            
            description = "mod2c module generated by nix";
            packages = [
                            pkgs.mod2c
                       ];
            
            conflicts = conflicts-modules;
        };                  

        hpc = pkgs.envModuleGen {
            name = "HPCrelease";
            version = "201607";
            description = "load BBP HPC environment generated by nix";
            moduleFilePrefix = "BBP/hpc";
            packages = [ 
                            # circuit building
                            pkgs.functionalizer 
                            pkgs.touchdetector
                            pkgs.mvdtool
                            pkgs.highfive
                            pkgs.bluebuilder
                            pkgs.flatindexer

                            # cellular sim
                            pkgs.coreneuron
                            pkgs.mod2c
                            pkgs.neurodamus
                            pkgs.neuron

							# nrnivmodl  
                            pkgs.reportinglib
                            pkgs.readline
                            pkgs.ncurses
							pkgs.hdf5
							pkgs.zlib 

                            # sub cellular sim
                            pkgs.steps-mpi

                            # point neuron
                            pkgs.nest

                            #utils
                            pkgs.bbp-mpi
                                                         
                       ];
            extraContent = "setenv BBP_HOME $targetEnv/"; 
            
            conflicts = conflicts-modules;                      


            dependencies = [ python27-full gcc ];
        };
        
        

        ## nse modules
        neurom = pkgs.envModuleGen rec {
            name = "neurom";
            moduleFilePrefix = "nix/nse";

            description = "neuroM module generated by nix";
            packages = [
                            pkgs.neurom
                       ];

            conflicts = conflicts-modules;
        };

        morphsyn = pkgs.envModuleGen rec {
            name = "morphsyn";
            moduleFilePrefix = "nix/nse";

            description = "morphsyn module generated by nix";
            packages = [
                            pkgs.morphsyn
                       ];

            conflicts = conflicts-modules;
        };


        bluejittersdk = pkgs.envModuleGen rec {
            name = "bluejittersdk";
            moduleFilePrefix = "nix/nse";

            description = "bluejittersdk module generated by nix";
            packages = [
                            pkgs.bluejittersdk
                       ];

            conflicts = conflicts-modules;
        };

        ## viz components

        gmsh = pkgs.envModuleGen rec {
            name = "gmsh";
            moduleFilePrefix = "nix";
            
            description = "gmsh module generated by nix";
            packages = [
                            pkgs.gmsh
                       ];

            conflicts = conflicts-modules;
        };

       blender = pkgs.envModuleGen rec {
            name = "blender";
            version = "2.75a";
            moduleFilePrefix = "nix";

            description = "blender module generated by nix";
            packages = [
                            pkgs.blender
                       ];

            conflicts = conflicts-modules;

			dependencies = [
						virtualgl
						];
        };



        glxinfo = pkgs.envModuleGen rec {
            name = "glxinfo";
            moduleFilePrefix = "nix";
            version = "8.1.0";
            
            isLibrary = true;
            description = "glxinfo module generated by nix";
            packages = [
                            pkgs.glxinfo
                       ];

            conflicts = conflicts-modules;
        };


        gldev = pkgs.envModuleGen rec {
            name = "gl-dev";
            moduleFilePrefix = "nix";
            version = "2016.09";
            setRoot = "GL_DEV"; 

            isLibrary = true;
            description = "GL dev module module generated by nix";
            packages = [
                            pkgs.xorg.libX11
                pkgs.xorg.libXt
                pkgs.xorg.libXft 
                pkgs.mesa           
                            pkgs.glxinfo
                       ];

            conflicts = conflicts-modules;
        };  


        virtualgl = pkgs.envModuleGen rec {
            name = "virtualgl";
            moduleFilePrefix = "nix";
        version = "2.5.1-noaliasingfix"; 
            isLibrary = true;
            description = "virtualgl module generated by nix";
            packages = [
                            pkgs.virtualgl
                       ];

            ## force NVIDIA driver libGL if it exist 
            ##TODO: tmp fix, need to be done properly
            ## by detecting and shipping nvidia driver 
            extraContent = ''
                prepend-path LD_LIBRARY_PATH /usr/lib64/nvidia/
                prepend-path LD_LIBRARY_PATH /pico/work/HBP_CDP21_it_0/pico/nix/store/5s2bwm70myy9qsmlv7fs4846zqy3ap2a-nvidia-x11-340.32/lib
                '';
            conflicts = conflicts-modules;
        };



        brion = pkgs.envModuleGen rec {
            name = "brion";
            moduleFilePrefix = "nix/viz";
            
            isLibrary = true;
            description = "Brion module generated by nix";
            packages = [
                            pkgs.brion
                       ];
            conflicts = conflicts-modules;
        };

        bbpsdk = pkgs.envModuleGen rec {
            name = "bbpsdk";
            moduleFilePrefix = "nix/viz";
            
            isLibrary = true;
            description = "BBPSDK module generated by nix";
            packages = [
                            pkgs.bbpsdk
                       ];
            conflicts = conflicts-modules;
        };


        equalizer = pkgs.envModuleGen rec {
            name = "equalizer";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "equalizer module generated by nix";
            packages = [
                            pkgs.equalizer
                       ];
            conflicts = conflicts-modules;
        };


        lunchbox = pkgs.envModuleGen rec {
            name = "lunchbox";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "lunchbox module generated by nix";
            packages = [
                            pkgs.lunchbox
                            pkgs.servus
                       ];
            conflicts = conflicts-modules;
        };


        vmmlib = pkgs.envModuleGen rec {
            name = "vmmlib";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "vmmlib module generated by nix";
            packages = [
                            pkgs.vmmlib
                       ];
            conflicts = conflicts-modules;
        };


        zeroeq = pkgs.envModuleGen rec {
            name = "zeroeq";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "zeroeq module generated by nix";
            packages = [
                            pkgs.zeroeq
                       ];
            conflicts = conflicts-modules;
        };


        zerobuf = pkgs.envModuleGen rec {
            name = "zerobuf";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "zerobuf module generated by nix";
            packages = [
                            pkgs.zerobuf
                       ];
            conflicts = conflicts-modules;
        };


        lexis = pkgs.envModuleGen rec {
            name = "lexis";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "lexis module generated by nix";
            packages = [
                            pkgs.lexis
                       ];
            conflicts = conflicts-modules;
        };


        rtneuron = pkgs.envModuleGen rec {
            name = "rtneuron";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "rtneuron module generated by nix";
            packages = [
                            pkgs.rtneuron pkgs.brion pkgs.bbpsdk pkgs.virtualgl pkgs.equalizer
                       ];
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
            conflicts = conflicts-modules;
        };


        embree = pkgs.envModuleGen rec {
            name = "embree";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "embree module generated by nix";
            packages = [
                            pkgs.embree
                            pkgs.ispc
                       ];
            conflicts = conflicts-modules;
        };



        ospray = pkgs.envModuleGen rec {
            name = "ospray";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "ospray module generated by nix";
            packages = [
                            pkgs.ospray
                       ];
            conflicts = conflicts-modules;

            dependencies = [ embree ];
        };


        brayns = pkgs.envModuleGen rec {
            name = "brayns";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "brayns module generated by nix";
            packages = [
                            pkgs.brayns
                       ];
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
            conflicts = conflicts-modules;
        };





        ## std components 

        python27-light = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-light";
            description = "minimalist python 2.7 module generated by nix";
            packages = let pythonPkgs = python27Packages;
                         in
                        [
                            # basic C/C++ bundle for pip 
                            gcc
                            stdenv
                            # python and module collection
                            pkgs.python27Full
                            pythonPkgs.pip
                            pythonPkgs.virtualenv
                       ];
            conflicts = [ python34-full python34-light ] ++ conflicts-modules;
            dependencies = [ nss-wrapper manylinux1-python ];
        };

        python27-full = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-full";
            isDefault = true;
            description = "complete python environment 2.7 generated by nix";
            packages = let pythonPkgs = python27Packages;
                         in
                        [
                            # basic C/C++ bundle for pip 
                            gcc
                            stdenv
                            # python and module collection
                            pkgs.python27Full 
                            pythonPkgs.six
                            pythonPkgs.pip
                            pythonPkgs.virtualenv
                            pythonPkgs.numpy
                            pythonPkgs.pandas                            
                            pythonPkgs.matplotlib
                            pythonPkgs.six
                            pythonPkgs.pycurl
                            pythonPkgs.h5py
                            pythonPkgs.setuptools
                            pythonPkgs.cython
							pythonPkgs.enum
                       ];
            conflicts = [ python34-full python34-light ] ++ conflicts-modules;                           
            dependencies = [ nss-wrapper gcc ];
        };      

        python34-light = pkgs.envModuleGen rec {
            name = "python";
            version = "3.4-light";
            description = "python 3.4 module generated by nix";
            packages = let pythonPkgs = pkgs.python34Packages;
                         in
                        [ 
                            pkgs.python34
                            pythonPkgs.pip
                            pythonPkgs.virtualenv
                       ];
            conflicts = [ python27-light python27-full ] ++ conflicts-modules;                          
            dependencies = [ nss-wrapper gcc ];

        };


        python34-full = pkgs.envModuleGen rec {
            name = "python";
            version = "3.4-full";
            description = "python 3.4 module generated by nix";
            packages = let pythonPkgs = pkgs.python34Packages;
                         in
                        [ 
                            pkgs.python34
                            pythonPkgs.six
                            pythonPkgs.pip
                            pythonPkgs.virtualenv                             
                            pythonPkgs.numpy
                            pythonPkgs.pandas                            
                            pythonPkgs.pycurl
                            pythonPkgs.h5py
                            pythonPkgs.setuptools
                       ];
            conflicts = [ python27-light python27-full ] ++ conflicts-modules; 
            dependencies = [ nss-wrapper gcc ];

        };

        cython = pkgs.envModuleGen rec {
            name = "cython";
            isLibrary = true;
            description = "cython module generated by nix";
            packages = [ 
                            pkgs.cython 
                       ];
            conflicts = conflicts-modules ++ [ "cython" ];
        }; 


        rust = pkgs.envModuleGen rec {
            name = "rust";
            version = "1.2";
            description = "rust platform module generated by nix";
            packages = [ 
                            pkgs.rustc
                            pkgs.cargo 
                       ];
        };    


        golang = pkgs.envModuleGen rec {
            name = "golang";
            version = "1.5";
            description = "golang and packages module generated by nix";
            packages = [ 
                            pkgs.goPackages.go
                            pkgs.goPackages.net
                            pkgs.goPackages.osext 
                       ];
        };  


        cmake = pkgs.envModuleGen rec {
            name = "cmake";
            version = "3.3";
            description = "cmake 3.3 module generated by nix";
            packages = [ 
                            pkgs.cmakeCurses
                       ];
            conflicts = [ "cmake" ];
        }; 


        git = pkgs.envModuleGen rec {
            name = "git";
            version = "2.5.4";
            description = "git module generated by nix";
            packages = [
                            pkgs.git pkgs.gitreview
                       ];
            conflicts = [ "git" ];
        }; 

        mercurial = pkgs.envModuleGen rec {
            name = "mercurial";
            version = "3.4.2";
            description = "mercurial module generated by nix";
            packages = [
                            pkgs.mercurial
                       ];
            conflicts = [ "mercurial" ];
        }; 


        boost = pkgs.envModuleGen rec {
            name = "boost";
            version = "1.58";
            isLibrary = true;
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;
            
            description = "boost 1.57 module generated by nix";
            packages = if isBlueGene then [
                            pkgs.bgq-boost-gcc47.crossDrv.dev
                            pkgs.bgq-boost-gcc47.crossDrv.lib
                       ] else [ 
                            pkgs.boost.dev pkgs.boost.lib
                       ];
            conflicts = conflicts-modules ++ [ "boost" ];
        };


        qt4 = pkgs.envModuleGen rec {
            name = "qt";
            isLibrary = true;
            description = "qt-4 module generated by nix";
            packages = [ 
                            pkgs.qt4
                       ];
            conflicts = conflicts-modules ++ [ "qt" ];
        };                

        openblas = pkgs.envModuleGen rec {
            name = "openblas";
            moduleFilePrefix = nix-target-prefix;
            
            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas module generated by nix";
            packages = [
                            ( if isBlueGene then pkgs.bgq-openblas.crossDrv
                            else pkgs.openblas)
                       ];

            extraContent = ''
                setenv ATLAS None
                setenv BLAS $targetEnv/lib/libopenblas.so
                setenv OPENBLAS $targetEnv/lib/libopenblas.so
           '';
 

            conflicts = conflicts-modules ++ [ openblasCompat ];
        };



        openblasCompat = pkgs.envModuleGen rec {
            name = "openblas-32abi";
            moduleFilePrefix = nix-target-prefix;
            
            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas Compatibility module generated by nix";
            packages = [
                            pkgs.openblasCompat
                       ];

            extraContent = ''
                setenv ATLAS None
                setenv BLAS $targetEnv/lib/libopenblas.so
                setenv OPENBLAS $targetEnv/lib/libopenblas.so
           '';
 

            conflicts = conflicts-modules ++ [ openblas ];
        };


        folly = pkgs.envModuleGen rec {
            name = "folly";
            isLibrary = true;
            setRoot = "FOLLY";
            description = "folly module generated by nix";
            packages = [
                            pkgs.folly pkgs.openssl pkgs.glog pkgs.libevent 
                       ];
            conflicts = conflicts-modules;
        };


        openssl = pkgs.envModuleGen rec {
            name = "openssl";
            version = "1.0.0";
            setRoot = "OPENSSL";
            description = "openssl module generated by nix";
            packages = [
                            pkgs.openssl
                       ];
            conflicts = conflicts-modules;


        };


    mpich2 = pkgs.envModuleGen rec {
            name = "mpich2";
            version = "3.2";
            isLibrary = true;
            isDefault = true;       
            description = "mpich2 module generated by nix";
            packages = [ 
                            pkgs.mpich2
                            ## add slurm for libpmi dependencies
                            ## pkgs.slurm-llnl
                       ];
            conflicts = conflicts-modules;
        };

        mvapich2 = pkgs.envModuleGen rec {
            name = "mvapich2";
            isLibrary = true;
            isDefault = true;       
            description = "mvapich2 module generated by nix";
            packages = [ 
                            pkgs.mvapich2 
                            ## add slurm for libpmi dependencies
                            ## pkgs.slurm-llnl
                       ];
            conflicts = conflicts-modules;
        };

        mvapich2-rdma = pkgs.envModuleGen rec {
            name = "mvapich2-rdma";
            isLibrary = true;
            isDefault = true;       
            description = "mvapich2 module generated by nix";
            packages = [ 
                            pkgs.mvapich2-rdma
                            ## add slurm for libpmi dependencies
                            ## pkgs.slurm-llnl
                       ];
            conflicts = conflicts-modules;

            extraContent = ''setenv MV2_ENABLE_AFFINITY "0" '';
        };
        
        intel-mpi-bench-rdma = pkgs.envModuleGen rec {
            name = "intel-mpi-bench";
            version = "2017-mvapich2-rma";
                  
            description = "mvapich2 module generated by nix";
            packages = [ 
                            pkgs.intel-mpi-bench-rdma
                       ];
            conflicts = conflicts-modules;
        };        

        hdf5 = pkgs.envModuleGen rec {
            name = "hdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;
            
            description = "hdf5 module generated by nix";
            packages = [ 
                            (if isBlueGene then pkgs.bgq-hdf5-gcc47.crossDrv
                             else pkgs.hdf5)
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" phdf5 hdf5-cpp ];
        };


        hdf5-cpp = pkgs.envModuleGen rec {
            name = "hdf5-cpp";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;
            
            description = "hdf5 module with C++ bindings generated by nix";
            packages = [ 
                            
                            pkgs.hdf5-cpp
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" phdf5 hdf5 ];
        };


       phdf5 = pkgs.envModuleGen rec {
            name = "phdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "parallel hdf5 module generated by nix";
            packages = [
							pkgs.phdf5
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" hdf5 hdf5-cpp ];
        };


        readline = pkgs.envModuleGen rec {
            name = "readline";
            version = "6.3";
            isLibrary = true;
            setRoot = "READLINE";
            description = "readline module generated by nix";
            packages = [ 
                            pkgs.readline 
                       ];
            conflicts = conflicts-modules ++ [ "readline" ];
        };

        ncurses = pkgs.envModuleGen rec {
            name = "ncurses";
            isLibrary = true;
            version = "5.9";
            setRoot = "NCURSES";
            description = "ncureses module generated by nix";
            packages = [ 
                            pkgs.ncurses 
                       ];
            conflicts = conflicts-modules ++ [ "ncurses" ];
        }; 


        petsc = pkgs.envModuleGen rec {
            name = "petsc";
            version = "3.7";
            isLibrary = true;
            description = "PETSc module generated by nix";
            packages = [
                            pkgs.petsc
                       ];
            conflicts = conflicts-modules;
        };

        scorec = pkgs.envModuleGen rec {
            name = "scorec";
            isLibrary = true;
            description = "SCOREC module generated by nix";
            packages = [
                            pkgs.scorec
                       ];
            conflicts = conflicts-modules;
        };




        libxml2 = pkgs.envModuleGen rec {
            name = "libxml2";
            isLibrary = true;            
            isDefault = true;
            setRoot = "LIBXML2";
            moduleFilePrefix = nix-target-prefix;
            
            description = "libxml2 module generated by nix";
            packages = [ 
                            (if isBlueGene then pkgs.bgq-libxml2-gcc47.crossDrv
                             else pkgs.libxml2)
                       ];
            conflicts = conflicts-modules;
        };

               
        zlib = pkgs.envModuleGen rec {
            name = "zlib";
            version = "1.2.8";
            isLibrary = true;            
            isDefault = true;
            setRoot = "ZLIB";
            moduleFilePrefix = nix-target-prefix;
            
            description = "zlib module generated by nix";
            packages = [ 
                            (if isBlueGene then pkgs.bgq-zlib-gcc47.crossDrv
                             else pkgs.zlib)
                       ];
            conflicts = conflicts-modules;
        };

        bison = pkgs.envModuleGen rec {
            name = "bison";
            version = "3.0.4";
            isLibrary = true;            
            description = "bison module generated by nix";
            packages = [ 
                            pkgs.bison 
                       ];
            conflicts = conflicts-modules;
        }; 

        flex = pkgs.envModuleGen rec {
            name = "flex";
            version = "2.5.39";
            isLibrary = true;            
            description = "flex module generated by nix";
            packages = [ 
                            pkgs.flex 
                       ];
            conflicts = conflicts-modules;
        };      
                  

        swig = pkgs.envModuleGen rec {
            name = "swig";
            version = "3.0.6";
            isLibrary = true;            
            description = "swig module generated by nix";
            packages = [ 
                            pkgs.swig
                       ];
            conflicts = conflicts-modules;
        };      
                  
        gsl = pkgs.envModuleGen rec {
            name = "gsl";
            version = "1.16";
            isLibrary = true;
            setRoot = "GSL";
            description = "gsl module generated by nix";
            packages = [
                            pkgs.gsl
                       ];
            conflicts = conflicts-modules;
        };

        tbb = pkgs.envModuleGen rec {
            name = "tbb";
            isLibrary = true;
            setRoot = "TBB";
            description = "TBB (Thread Building Block) Library ";
            packages = [
                            pkgs.tbb 

                        ];
            conflicts = conflicts-modules;
    
        };

        llvm = pkgs.envModuleGen rec {
            name = "llvm";
            isLibrary = true;
            version = "3.6.2";
            setRoot = "LLVM";
            description = "Low level Virtual Machine ";
            packages = [
                            pkgs.llvm

                        ];
            conflicts = conflicts-modules;

        };


        gcc52 = pkgs.envModuleGen rec {
            name = "gcc";
            version = "5.2.0";
            description = "gcc 5.2.0 module generated by nix";
            packages = [ 
                            pkgs.gcc5 
                       ];
            conflicts = [ gcc  clang];                             
            extraContent = ''       
                append-path --delim " " NIX_CFLAGS_COMPILE "-I${pkgs.gcc5.cc}/include"
                append-path --delim " " NIX_LDFLAGS "-L${pkgs.gcc5.cc}/lib"
            '';
        };   

        gcc = pkgs.envModuleGen rec {
            name = "gcc";
            version = "4.9.3";
            description = "gcc 4.9.3 module generated by nix";
            isDefault = true;
            packages = [ 
                            pkgs.gcc
                       ];
            conflicts = [ gcc52  clang icc ];

            # enforce inclusiong of compiler lib/include path first to 
            # defend against badly done compilation script
            extraContent = ''       
                append-path --delim " " NIX_CFLAGS_COMPILE "-I${pkgs.gcc.cc}/include"
                append-path --delim " " NIX_LDFLAGS "-L${pkgs.gcc.cc}/lib"
            '';

        }; 

        clang = pkgs.envModuleGen rec {
            name = "clang";
            version= "3.6.2";
            description = "clang 3.6.2 module generated by nix";
            packages = [ 
                            pkgs.clang
                       ];
            conflicts = [ gcc  gcc52 icc];                       
        };                

        icc = if (pkgs.WrappedICC != null) then (pkgs.envModuleGen rec {
            name = "icc";
            version= "2016";
            description = "Intel Compiler module generated by nix";
            packages = [ 
                            pkgs.WrappedICC
                       ];
            conflicts = [ gcc  gcc52 clang ];                
        }) else null;

        R = pkgs.envModuleGen rec {
            name = "R";
            version = "3.2.2";
            description = "R module generated by nix";
            packages = [ 
                            pkgs.R
                       ];
        };


        zeromq  = pkgs.envModuleGen rec {
            name = "zeromq";
            version = "4.1.2";
            isLibrary = true;
            setRoot = "ZEROMQ";
            description = "zeromq module generated by nix";
            packages = [ 
                            pkgs.zeromq
                       ];
        };


        freetype = pkgs.envModuleGen rec {
            name = "freetype";
            version = "2.5.4";
            isLibrary = true;
            setRoot = "FREETYPE";
            description = "freetype module generated by nix";
            packages = [ pkgs.freetype ];
            extraContent = ''
                append-path --delim " " NIX_CFLAGS_COMPILE "-I$targetEnv/include"
                append-path --delim " " NIX_LDFLAGS "-L$targetEnv/lib"
           '';
        };



        dev-env-pkgs = [                           # VCS
                            git mercurial
                            #build tools
                            cmake

                            # libs
                            default_mpi
                            boost
                            zlib
                            hdf5
                            libxml2
                            openblas
                            openssl 
                            swig
                            readline
                            ncurses
                            gldev
                            freetype
                            tbb 

        ];


		dev-env-python27pkgs = [
								freetype
								gldev
								ncurses
								readline
								openblasCompat
								libxml2
								hdf5
								default_mpi
                                gcc 
							];
									


        dev-env-gcc = pkgs.envModuleGen rec {
            name = "dev-env-gcc";
            version = "09.2016";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            gcc ] ++ dev-env-pkgs;
           conflicts = conflicts-modules;
        };

        dev-env-clang = pkgs.envModuleGen rec {
            name = "dev-env-clang";
            version = "09.2016";
            description = "clang development environment from nix";
            dependencies = [
                            # compiler
                            clang
                           ] ++ dev-env-pkgs;                            
                      
            conflicts = conflicts-modules;
        };

        dev-env-icc = if ( icc != null) then pkgs.envModuleGen rec {
            name = "dev-env-icc";
            version = "09.2016";
            description = "Intel Compiler development environment from nix";
            dependencies = [
                            # compiler
                            icc
                           ] ++ dev-env-pkgs;                            
            conflicts = conflicts-modules;
        } else null;


		dev-env-python27 = pkgs.envModuleGen rec {
            name = "dev-env-python27";
            version = "2017";
            description = "python development environment from nix";
            dependencies = [
                            # compiler
                            python27-light ] ++ dev-env-python27pkgs ;
           conflicts = conflicts-modules;
        };



        all = pkgs.buildEnv {
        name = "all-modules";
        paths = 
        [ 
            boost  hdf5 libxml2 zlib phdf5 hdf5-cpp
            openblas openblasCompat openssl petsc folly scorec 
            bison flex swig gcc gsl freetype


            cmake readline ncurses
            python27-light python27-full manylinux1-python 
            cython 

            # parallel
            tbb 

            # wrapper for auth
            nss-wrapper 
            
            # default mpi
            default_mpi



            #vcs
            git mercurial

            # nse team
            neurom morphsyn bluejittersdk

            # viz team
            lunchbox brion zeroeq zerobuf lexis vmmlib
            bbpsdk rtneuron equalizer virtualgl glxinfo
            brayns embree ospray 

            gldev

            # hpc team
            mvdtool morpho-tool hpctools functionalizer touchdetector bluebuilder neuron 
            nest mod2c coreneuron


            #dev env
            dev-env-gcc
			dev-env-python27
        ];
        };

        ## utilities

        ## map libnss plugins in your LD_PATH to solve auth issues
        nss-wrapper = pkgs.envModuleGen rec {
            name = "nss-wrapper";
            version = "1.0";
            isLibrary = true;
            description = "nss-wrapper, map local authentication plugins in your environment";
            packages = [
                            pkgs.libnss-native-plugins
                       ];
            conflicts = conflicts-modules;
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
        };


        ## environment containing all required dependencies for manylinux1
        manylinux1-python = pkgs.envModuleGen rec {
            name = "manylinux1-python";
            version = "1.0";
            isLibrary = true;
            description = "provide all library for python manylinux requirement";
            packages = [
                            pkgs.manylinux1
                       ];
            conflicts = conflicts-modules;
        };

        


        ## extra not portable softwares
        papi = pkgs.envModuleGen rec {
            name = "papi";
            isLibrary = true;            
            description = "papi module generated by nix";
            packages = [ 
                            pkgs.papi 
                       ];
            conflicts = conflicts-modules;
        }; 

        hpctoolkit = pkgs.envModuleGen rec {
            name = "hpctoolkit";
            isLibrary = true;            
            description = "hpctoolkit module generated by nix";
            packages = [ 
                            pkgs.hpctoolkit 
                       ];
            conflicts = conflicts-modules;
        }; 

        extra = pkgs.buildEnv {
        name = "extra-modules";
        paths = 
        [ 
            papi 
            hpctoolkit
            dev-env-clang dev-env-icc
            clang icc
            llvm        
    
            #gmsh
            blender 
            intel-mpi-bench-rdma
            zeromq 

            python34-light python34-full 

            #rdma local specific
            default_mpi_rdma
        steps 

        ];
        };

};

bgq-modules =
(if  ((import ../../bluegene/portability.nix).isBlueGene == false)
then { }
else
with generic-modules; rec {

      bgq-gcc = pkgs.envModuleGen rec {
            name = "gcc";
            version = "4.1.4";
            moduleFilePrefix = "nix/bgq";
            description = "GCC compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.gcc-bgq
                       ];
      };

      bgq-ibm-mpi = pkgs.envModuleGen rec {
            name = "mpich2";
            version = "1.5-gcc";
            moduleFilePrefix = "nix/bgq";
            isDefault = true;
            isLibrary = true;
            description = "Official BGQ MPI backend  generated by nix";
            packages = [
                            pkgs.ibm-mpi.crossDrv
                       ];
      };




     bgq-boost = pkgs.envModuleGen rec {
            name = "boost";
            version = "1.58.0-xlc";
            moduleFilePrefix = "nix/bgq";
            
            isLibrary = true;
            description = "boost for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-boost.dev pkgs.bgq-boost.lib
                       ];
      };

      bgq-mpich2 = pkgs.envModuleGen rec {
            name = "mpich2";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "mpich for BGQ, Rob's forked version generated by nix";
            packages = [
                            pkgs.bg-mpich.crossDrv
                       ];
      };



    phdf5 = pkgs.envModuleGen rec {
            name = "phdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "hdf5 module generated by nix";
            packages = [
                            pkgs.bgq-phdf5-gcc47.crossDrv
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" ];
        };



     bgq-hdf5 = pkgs.envModuleGen rec {
            name = "hdf5";
            moduleFilePrefix = "nix/bgq";
            version = "1.8.14-xlc";
            setRoot = "HDF5";            
            isLibrary = true;
            description = "hdf5 for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-hdf5
                       ];
      };


     bgq-libxml2 = pkgs.envModuleGen rec {
            name = "libxml2";
            version = "2.9.7-xlc";
            moduleFilePrefix = "nix/bgq";
            
            description = "libxml2 for BGQ backend  generated by nix";
            isLibrary = true;
            packages = [
                            pkgs.bgq-libxml2
                       ];
      };



      bgq-cmake = pkgs.envModuleGen rec {
            name = "cmake";
            version = "3.3.2";
            moduleFilePrefix = "nix/bgq";
            description = "cmake for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-cmake
                       ];
      };

 


     bgq-zlib = pkgs.envModuleGen rec {
            name = "zlib";
            version = "1.2.8-xlc";
            setRoot = "ZLIB"; 
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "zlib for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-zlib
                       ];
      };



     bgq-glibc = pkgs.envModuleGen rec {
            name = "glibc";
            version = "2.17";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "glibc in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.bglibc
                       ];
      };


     bgq-gcc47 = pkgs.envModuleGen rec {
            name = "gcc";
            version = "4.7.4";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "GCC 4.7.4 in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.bg-gcc47
                       ];
            conflicts = [ bgq-gcc ];
      };


     bgq-xlc = pkgs.envModuleGen rec {
            name = "xlc";
            version = "12.1";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "XLC in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.xlc
                       ];
            conflicts = [ bgq-gcc ];
      };


     bgq-mpi-xlc = pkgs.envModuleGen rec {
            name = "mpich2";
            version = "1.5-xlc";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "MPI with XLC compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.ibm-mpi-xlc
                       ];
            conflicts = [ bgq-gcc ];
      };


      bgq-python27-light = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-light";
            moduleFilePrefix = "nix/bgq";
            description = "minimalist python 2.7 for BGQ backend generated by nix";
            packages = let pythonPkgs = python27Packages;
                         in
                        [
                            # basic C/C++ bundle for pip
                            pkgs.bg-gcc47
                            pkgs.bgq-stdenv-gcc47

                            # python and module collection
                            pkgs.bgq-python27-gcc47.crossDrv
                            pkgs.pythonPackages.pip
                            pkgs.pythonPackages.virtualenv
                            pkgs.pythonPackages.cython
                       ];
            conflicts = [ bgq-python27-full  ] ++ conflicts-modules;
      };

      bgq-python27-full = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-full";
            isDefault = true;
            moduleFilePrefix = "nix/bgq";
            description = "minimalist python 2.7 for BGQ backend generated by nix";
            packages = 
            let pythonPkgs = python27Packages;
                in
                [
                    # basic C/C++ bundle for pip
                    pkgs.bg-gcc47
                    pkgs.bgq-stdenv-gcc47

                    # python and module collection
                    pkgs.bgq-python27-gcc47.crossDrv
                    pkgs.bgq-pythonPackages-gcc47.bg-numpy.crossDrv
                    bgq-pythonPackages-gcc47.bg-mpi4py.crossDrv
                    bgq-pythonPackages-gcc47.bg-h5py.crossDrv
					pkgs.pythonPackages.enum
                    pkgs.pythonPackages.pip
                    pkgs.pythonPackages.virtualenv 
                    pkgs.pythonPackages.setuptools
                    pkgs.pythonPackages.cython
               ];
            conflicts = [ bgq-python27-light ] ++ conflicts-modules;
      };


      bgq-openssl = pkgs.envModuleGen rec {
            name = "openssl";
            version  = "1.0.1s";
            setRoot = "OPENSSL";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "openssl for BGQ backend  generated by nix";
            packages = [
                            pkgs.all-pkgs-bgq-gcc47.openssl
                       ];
      };


     openblas-static = pkgs.envModuleGen rec {
            name = "openblas-static";
            moduleFilePrefix = nix-target-prefix;

            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas module generated by nix";
            packages = [
                            ( if isBlueGene then pkgs.bgq-openblas-static.crossDrv
                            else pkgs.openblas)
                       ];
            conflicts = conflicts-modules;
        };



      bgq-gsl = pkgs.envModuleGen rec {
            name = "gsl";
            version  = "1.16";
            setRoot = "GSL";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "gsl for BGQ backend  generated by nix";
            packages = [
                            pkgs.all-pkgs-bgq-gcc47.gsl.crossDrv
                       ];
      };


      bgq-petsc = pkgs.envModuleGen rec {
            name = "petsc";
            setRoot = "PETSC";
            moduleFilePrefix = "nix/bgq"; 
            isLibrary = true;
            description = "petsc for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-petsc-gcc47.crossDrv
                       ];
      };

      bgq-petsc-nodebug = pkgs.envModuleGen rec {
            name = "petsc-nodebug";
            setRoot = "PETSC";
            moduleFilePrefix = "nix/bgq"; 
            isLibrary = true;
            description = "petsc for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-petsc-gcc47-nodebug.crossDrv
                       ];
      };



      bgq-scorec = pkgs.envModuleGen rec {
            name = "scorec";
            setRoot = "SCOREC";
            moduleFilePrefix = "nix/bgq"; 
            isLibrary = true;
            description = "SCOREC for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-scorec-gcc47.crossDrv
                            pkgs.bgq-parmetis-gcc47.crossDrv
                            pkgs.bgq-zoltan-gcc47.crossDrv
                       ];
      };



      bgq-dev-env-pkgs-gcc = [
        hdf5 libxml2 bison flex boost zlib openblas bgq-ibm-mpi bgq-cmake bgq-glibc
        
      ];

      bgq-dev-env-gcc = pkgs.envModuleGen rec {
            name = "dev-env-gcc";
            version = "02.2017";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            bgq-gcc47
                             ] ++ bgq-dev-env-pkgs-gcc;
           conflicts = conflicts-modules;
        };


      bgq-dev-env-pkgs-xlc = [
        bgq-hdf5 bgq-libxml2 boost bgq-zlib bgq-mpi-xlc bgq-cmake bgq-glibc
        
      ];

      bgq-dev-env-xlc = pkgs.envModuleGen rec {
            name = "dev-env-xlc";
            version = "02.2017";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            bgq-xlc
                             ] ++ bgq-dev-env-pkgs-xlc;
           conflicts = conflicts-modules;
        };

 
      bgq-neuron = neuron.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc ];
        # additional override
        extraContent = ''
            setenv BBP_HOME $targetEnv/
            prepend-path LD_LIBRARY_PATH $PYTHONHOME/lib
           ''; 
      };


      bgq-coreneuron = coreneuron.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc ];
        extraContent = ''
            setenv BBP_HOME $targetEnv/
            prepend-path LD_LIBRARY_PATH $PYTHONHOME/lib
           '';

      };
      bgq-mod2c = mod2c;

      all = pkgs.buildEnv {
        name = "all-modules";
        paths = 
        [ 
            # bgq XLC based modules
            bgq-boost bgq-hdf5 bgq-libxml2 bgq-zlib 

            ## bgq GCC based modules
            hdf5 phdf5 libxml2 bison flex boost zlib openblas openblas-static

            # bgq packages common 
            bgq-python27-light bgq-python27-full 
            bgq-openssl  bgq-petsc bgq-petsc-nodebug bgq-scorec bgq-gsl

            bgq-cmake

            #BGQ compiler and mpi
            bgq-mpi-xlc bgq-gcc  bgq-ibm-mpi bgq-gcc47 bgq-xlc bgq-mpich2 bgq-glibc

            #dev enbs
            bgq-dev-env-gcc bgq-dev-env-xlc

            # hpc team
            mvdtool hpctools functionalizer touchdetector           
            bgq-coreneuron bgq-neuron bgq-mod2c
        ];
      };
      
      extra = all;

      hpc = pkgs.envModuleGen {
            name = "HPCrelease_BGQ";
            description = "load BBP HPC environment on BGQ module generated by nix";
            moduleFilePrefix = "BBP/hpc";            
            packages = 
            [ 
                pkgs.functionalizer pkgs.functionalizer.doc
                pkgs.touchdetector  pkgs.touchdetector.doc
                pkgs.bluebuilder                            
                pkgs.highfive
                pkgs.mvdtool                            

                # cellular sim
                pkgs.coreneuron
                pkgs.mod2c
                pkgs.neurodamus
                pkgs.neuron
                pkgs.reportinglib

				# required library for nrnivmdl
                pkgs.readline
                pkgs.ncurses      
				pkgs.bgq-hdf5
				pkgs.bgq-zlib

				# default compiler
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

			dependencies = [ bgq-mpi-xlc ];

     };



});

in 
  generic-modules // bgq-modules
