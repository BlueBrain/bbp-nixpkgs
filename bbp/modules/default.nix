{
    pkgs
}:


let
    isBlueGene = ((import ../../bluegene/portability.nix).isBlueGene == true);

    conflicts-modules = [ "mvapich2" "mvapich2-psm-x86_64" "openmpi" "gcc" "mpich2" "virtualgl"  ];

    nix-target-prefix = if isBlueGene then "nix/bgq" else "nix";

    debugger-prefix = nix-target-prefix + "/debugger";

    profiler-prefix = nix-target-prefix + "/profiler";

    bgq-cross = pkg: if isBlueGene then pkg.crossDrv else pkg;

    bgq-is-gcc-module = if isBlueGene then "gcc47" else "";

    bgq-is-xlc-module = if isBlueGene then "xlc" else "";

    generic-modules = rec {

    default_mpi = mvapich2; 

    default_mpi_rdma = if (pkgs.bbp-mpi-rdma == pkgs.mvapich2-rdma) then mvapich2-rdma
                      else null;



        ## hpc components

        ## hello world
        # simple stupid demo test program
        helloworld = pkgs.envModuleGen rec {
            name = "hello-world";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "hello world program generated by nix";
            packages = [
                            ( if(isBlueGene) then pkgs.helloworld.crossDrv else  pkgs.helloworld)
                       ];
            conflicts = conflicts-modules;
        };

        hpcbench = pkgs.envModuleGen rec {
            name = "hpcbench";
            moduleFilePrefix = "nix/hpc";
            description = "HPCBench Python package generated by nix";
            packages = [
                pkgs.pythonPackages.hpcbench
            ];
            conflicts = conflicts-modules;
        };

        mvdtool = pkgs.envModuleGen rec {
            name = "mvd-tool";
            setRoot = "MVDTOOL";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "MVD file format manipulation tool module generated by nix";
            packages = [
                            pkgs.mvdtool
                       ];
            conflicts = conflicts-modules;
        };

        morphotool = pkgs.envModuleGen rec {
            name = "morpho-tool";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "morphology file format manipulation tool module generated by nix";
            packages = [
                            pkgs.morphotool
                       ];
            conflicts = conflicts-modules;
        };

        morphomesher = pkgs.envModuleGen rec {
            name = "morpho-mesher";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = pkgs.morphomesher.meta.description;
            packages = [
              pkgs.morphomesher
            ];
            conflicts = conflicts-modules;
        };

        syntool = pkgs.envModuleGen rec {
            name = "syn-tool";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "synapse file format manipulation tool module generated by nix";
            packages = [
                            pkgs.syntool
                       ];
            conflicts = conflicts-modules;
        };

        mdtest = pkgs.envModuleGen rec {
            name = "mdtest";
            moduleFilePrefix = "nix/bench";
            description = pkgs.mdtest.meta.description;
            packages = [
                pkgs.mdtest
            ];
            conflicts = conflicts-modules;
        };

        highfive = pkgs.envModuleGen rec {
            name = "highfive";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "C++ header only HDF5 library module generated by nix";
            packages = [
                            pkgs.highfive
                       ];
            conflicts = conflicts-modules;
        };

        ior = pkgs.envModuleGen rec {
            name = "ior";
            moduleFilePrefix = "nix/bench";
            description = pkgs.ior.meta.description;
            packages = [
                pkgs.ior
            ];
            conflicts = conflicts-modules;
        };

        perftest = pkgs.envModuleGen rec {
            name = "perftest";
            moduleFilePrefix = "nix/bench";
            description = pkgs.perftest.meta.description;
            packages = [
                pkgs.perftest
            ];
            conflicts = conflicts-modules;
        };

        iperf = pkgs.envModuleGen rec {
            name = "iperf";
            moduleFilePrefix = "nix/bench";
            description = pkgs.iperf.meta.description;
            packages = [
                pkgs.iperf
            ];
            conflicts = conflicts-modules;
        };

        shoc = pkgs.envModuleGen rec {
            name = "shoc";
            moduleFilePrefix = "nix/bench";
            description = pkgs.shoc.meta.description;
            packages = [
                pkgs.shoc
            ];
            conflicts = conflicts-modules;
        };

        stream = pkgs.envModuleGen rec {
            name = "stream";
            moduleFilePrefix = "nix/bench";
            description = pkgs.stream.meta.description;
            packages = [
                pkgs.stream
            ];
            conflicts = conflicts-modules;
        };

        hpl = pkgs.envModuleGen rec {
            name = "hpl";
            moduleFilePrefix = "nix/bench";
            description = pkgs.hpl.meta.description;
            packages = [
                pkgs.hpl
            ];
            conflicts = conflicts-modules;
        };

        hpctools = pkgs.envModuleGen rec {
            name = "hpctools";
            moduleFilePrefix = "nix/hpc";

            isLibrary = true;
            description = "hpctools module generated by nix";
            packages = [
                            (pkgs.hpctools-xlc)
                       ];
            conflicts = conflicts-modules;
        };


        functionalizer = pkgs.envModuleGen rec {
            name = "functionalizer";
            moduleFilePrefix = "nix/hpc";
            description = "functionalizer module generated by nix";
            packages =
            [
                (pkgs.functionalizer)
                (pkgs.functionalizer).doc
            ];
            conflicts =  conflicts-modules;
        };

        touchdetector = pkgs.envModuleGen rec {
            name = "touchdetector";
            moduleFilePrefix = "nix/hpc";
            description = "touchdetector module generated by nix";
            packages =
            [
                pkgs.touchdetector
                pkgs.touchdetector.doc
            ];
            conflicts = conflicts-modules;
        };

        pytouchreader = pkgs.envModuleGen rec {
            name = "pytouchreader";
            moduleFilePrefix = "nix/hpc";
            description = "pytouchreader module generated by nix";
            packages =
            [
                pkgs.pytouchreader
            ] ++ pkgs.pytouchreader.pythonDeps;
            conflicts = conflicts-modules;
        };



        bluebuilder = pkgs.envModuleGen rec {
            name = "bluebuilder";
            moduleFilePrefix = "nix/hpc";

            description = "bluebuilder module generated by nix";
            packages =
            [
                pkgs.bluebuilder
            ];
            conflicts = conflicts-modules;
        };

        flatindexer = pkgs.envModuleGen rec {
            name = "flatindexer";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;

            description = "flatindexer module generated by nix";
            packages =
            [
                pkgs.flatindexer
            ];
            conflicts = conflicts-modules ++ [ flatindexer-py3 ];
        };

        flatindexer-py3 = pkgs.envModuleGen rec {
            name = "flatindexer-py3";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;

            description = "flatindexer module generated by nix";
            packages =
            [
                pkgs.flatindexer-py3
            ];
            conflicts = conflicts-modules ++ [ flatindexer ] ;
        };

        spykfunc = pkgs.envModuleGen rec {
            name = "spykfunc";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;

            description = "spykfunc module generated by nix";
            packages = [ pkgs.spykfunc ];
            conflicts = conflicts-modules ++ [ spykfunc-py3 ];

            # workaround to prevent a Nix wrapped Python executable
            # script to be called with python
            # https://github.com/apache/spark/blob/92cfbeeb5ce9e2c618a76b3fe60ce84b9d38605b/bin/find-spark-home#L37
            extraContent = ''
                setenv PYSPARK_DRIVER_PYTHON " "
            '';
        };

        spykfunc-py3 = pkgs.envModuleGen rec {
            name = "spykfunc-py3";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;

            description = "spykfunc module generated by nix";
            packages = [ pkgs.spykfunc-py3 ];
            conflicts = conflicts-modules ++ [ spykfunc ] ;

            # workaround to prevent a Nix wrapped Python executable
            # script to be called with python
            # https://github.com/apache/spark/blob/92cfbeeb5ce9e2c618a76b3fe60ce84b9d38605b/bin/find-spark-home#L37
            extraContent = ''
                setenv PYSPARK_DRIVER_PYTHON " "
            '';
        };

        neurodamus = pkgs.envModuleGen rec {
            name = "neurodamus";
            moduleFilePrefix = "nix/hpc";
            setRoot = "NEURODAMUS";
            isLibrary = true;
            description = "neurodamus module generated by nix";
            packages =
            [
                pkgs.neurodamus
                pkgs.reportinglib
                pkgs.readline
                pkgs.ncurses
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;

            dependencies = [ gcc neuron ];
        };


        neurodamus-savestate = pkgs.envModuleGen rec {
            name = "neurodamus-savestate";
            moduleFilePrefix = "nix/hpc";
            setRoot = "NEURODAMUS";
            isLibrary = true;
            description = "neurodamus with save state branch module generated by nix";
            packages =
            [
                pkgs.neurodamus-savestate
                pkgs.reportinglib
                pkgs.readline
                pkgs.ncurses
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;

            dependencies = [ gcc neuron ];
        };



        neurodamus-hippocampus = pkgs.envModuleGen rec {
            name = "neurodamus-hippocampus";
            moduleFilePrefix = "nix/hpc";
            setRoot = "NEURODAMUS";
            isLibrary = true;
            description = "neurodamus with save state branch module generated by nix";
            packages =
            [
                pkgs.neurodamus-hippocampus
                pkgs.reportinglib
                pkgs.readline
                pkgs.ncurses
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;

            dependencies = [ gcc neuron ];

        };

        neurodamus-simplification = pkgs.envModuleGen rec {
            name = "neurodamus-simplification";
            moduleFilePrefix = "nix/hpc";
            setRoot = "NEURODAMUS";
            isLibrary = true;
            description = "neurodamus with simplification branch module generated by nix";
            packages =
            [
                pkgs.neurodamus-simplification
                pkgs.reportinglib
                pkgs.readline
                pkgs.ncurses
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;

            dependencies = [ gcc neuron ];
        };

        neuron = pkgs.envModuleGen rec {
            name = "neuron";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            setRoot = "NEURON";
            description = "standardn neuron module generated by nix";
            packages =
            [
                pkgs.neuron
                pkgs.neuron.iv
                pkgs.readline
                pkgs.ncurses
            ];

            conflicts = conflicts-modules;

            dependencies = [ gcc ];
        };


        neuron-nomultisend = pkgs.envModuleGen rec {
            name = "neuron-nomultisend";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            setRoot = "NEURON";
            description = "neuron without multisend module generated by nix";
            packages =
            [
                pkgs.neuron-nomultisend
                pkgs.neuron-nomultisend.iv
                pkgs.readline
                pkgs.ncurses
            ];

            conflicts = conflicts-modules;

            dependencies = [ gcc ];
        };


        coreneuron = pkgs.envModuleGen rec {
            name = "coreneuron";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "neuron module generated by nix";
            packages = [
                            pkgs.coreneuron
                            pkgs.neuron
                            pkgs.reportinglib
                            pkgs.readline
                            pkgs.ncurses
                       ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;

            dependencies = [ gcc ];

        };

        reportinglib = pkgs.envModuleGen rec {
            name = "reportinglib";
            moduleFilePrefix = "nix/hpc";
            setRoot = "REPORTING";
            isLibrary = true;
            description = "reporting lib module generated by nix";
            packages = [
                            pkgs.reportinglib
                            pkgs.readline
                            pkgs.ncurses
                       ];

            conflicts = conflicts-modules;

            dependencies = [ gcc ];

        };


        steps = pkgs.envModuleGen rec {
            name = "steps";
            moduleFilePrefix = "nix/hpc";

            isLibrary = true;
            description = "steps module generated by nix";
            packages = [
                            (if isBlueGene then pkgs.steps-mpi.crossDrv else pkgs.steps-mpi)
                       ];

            conflicts = conflicts-modules;
        };


        nest = pkgs.envModuleGen rec {
            name = "nest";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "nest module generated by nix";
            packages = [
                            pkgs.nest
                       ];

            conflicts = conflicts-modules;
        };

        cyme = pkgs.envModuleGen rec {
            name = "cyme";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "cyme module generated by nix";
            packages = [
                            pkgs.cyme
                       ];

            conflicts = conflicts-modules;
        };

        neuromapp = pkgs.envModuleGen rec {
            name = "neuromapp";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "neuromapp module generated by nix";
            packages = [
                            pkgs.neuromapp
                       ];

            conflicts = conflicts-modules;
        };


        mod2c = pkgs.envModuleGen rec {
            name = "mod2c";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "mod2c module generated by nix";
            packages = [
                            pkgs.mod2c
                       ];
           conflicts = conflicts-modules;
        };

        learningengine = pkgs.envModuleGen rec {
            name = "learningengine";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "learningengine module generated by nix";
            packages = [
                            pkgs.learningengine
                       ];

            conflicts = conflicts-modules;
        };

 

        hpc = pkgs.envModuleGen {
            name = "HPCrelease";
            version = "201711";
            description = "load BBP HPC environment generated by nix";
            moduleFilePrefix = "BBP/hpc";
            packages = [
                            # circuit building
                            pkgs.functionalizer
                            pkgs.touchdetector
                            pkgs.mvdtool
                            pkgs.highfive
                            pkgs.bluebuilder

                            # cellular sim
                            pkgs.coreneuron
                            pkgs.mod2c
                            pkgs.reportinglib
                            pkgs.neurodamus
                            pkgs.neuron

                            # nrnivmodl
                            pkgs.reportinglib
                            pkgs.readline
                            pkgs.ncurses
                            pkgs.hdf5
                            pkgs.zlib

                            # sub cellular sim
                            pkgs.steps-mpi

                            # point neuron
                            pkgs.nest

                            #utils
                            pkgs.bbp-mpi

                       ];
            extraContent = "setenv BBP_HOME $targetEnv/";

            conflicts = conflicts-modules;


            dependencies = [ python27-full gcc ];
        };



        ## nse modules
        neurom = pkgs.envModuleGen rec {
            name = "neurom";
            moduleFilePrefix = "nix/nse";

            description = "neuroM module generated by nix";
            packages = [
                            pkgs.neurom
                            ## include all dependencies in the env
                       ] ++ pkgs.neurom.pythonDeps;

            conflicts = conflicts-modules;
        };


        bluepy = pkgs.envModuleGen rec {
            name = "bluepy";
            moduleFilePrefix = "nix/nse";

            description = "bluepy module generated by nix";
            packages = [
                            pkgs.bluepy
                            ## include all dependencies in the env
                       ] ++ pkgs.bluepy.pythonDeps;

            conflicts = conflicts-modules;
        };

        bluepy_dev = pkgs.envModuleGen rec {
            name = "bluepy-dev";
            moduleFilePrefix = "nix/nse";

            description = "bluepy module generated by nix";
            packages = [
                            pkgs.bluepy_0_9_6
                            ## include all dependencies in the env
                       ] ++ pkgs.bluepy_0_9_6.pythonDeps;

            conflicts = conflicts-modules;
        };



        morphscale = pkgs.envModuleGen rec {
            name = "morphscale";
            moduleFilePrefix = "nix/nse";

            description = "morphscale module generated by nix";
            packages = [
                            pkgs.morphscale
                       ];

            conflicts = conflicts-modules;
        };


        morphsyn = pkgs.envModuleGen rec {
            name = "morphsyn";
            moduleFilePrefix = "nix/nse";

            description = "morphsyn module generated by nix";
            packages = [
                            pkgs.morphsyn
                       ];

            conflicts = conflicts-modules;
        };

        muk = pkgs.envModuleGen rec {
            name = "muk";
            moduleFilePrefix = "nix/nse";

            description = "muk module generated by nix";
            packages = [
                            pkgs.muk
                       ];

            conflicts = conflicts-modules;
        };

        placement-algorithm = pkgs.envModuleGen rec {
            name = "placement-algorithm";
            moduleFilePrefix = "nix/nse";
            description = "placementAlgorithm module generated by nix";
            packages = [
              pkgs.placement-algorithm
            ];
            conflicts = conflicts-modules;
        };

        bluejittersdk = pkgs.envModuleGen rec {
            name = "bluejittersdk";
            moduleFilePrefix = "nix/nse";

            description = "bluejittersdk module generated by nix";
            packages = [
                            pkgs.bluejittersdk
                       ];

            conflicts = conflicts-modules;
        };

        bluerepairsdk = pkgs.envModuleGen rec {
            name = "bluerepairsdk";
            moduleFilePrefix = "nix/nse";

            description = "bluerepairsdk module generated by nix";
            packages = [
                            pkgs.bluerepairsdk
                       ];

            conflicts = conflicts-modules;
        };

        ## viz components

        gmsh = pkgs.envModuleGen rec {
            name = "gmsh";
            moduleFilePrefix = "nix";

            description = "gmsh module generated by nix";
            packages = [
                            pkgs.gmsh
                       ];

            conflicts = conflicts-modules;
        };

       blender = pkgs.envModuleGen rec {
            name = "blender";
            moduleFilePrefix = "nix";

            description = "blender module generated by nix";
            packages = [
                            pkgs.blender
                       ];

            conflicts = conflicts-modules;

            dependencies = [
                        virtualgl
                        ];
        };



        glxinfo = pkgs.envModuleGen rec {
            name = "glxinfo";
            moduleFilePrefix = "nix";
            version = "8.1.0";

            isLibrary = true;
            description = "glxinfo module generated by nix";
            packages = [
                            pkgs.glxinfo
                       ];

            conflicts = conflicts-modules;
        };


        gldev = pkgs.envModuleGen rec {
            name = "gl-dev";
            moduleFilePrefix = "nix";
            version = "2017.11";
            setRoot = "GL_DEV";

            isLibrary = true;
            description = "GL dev module module generated by nix";
            packages = [
                            pkgs.xorg.xproto
                            pkgs.xorg.libXpm
                            pkgs.xorg.libXpm.dev
                            pkgs.xorg.libX11
                            pkgs.xorg.libX11.dev
							pkgs.xorg.libXext
							pkgs.xorg.libXext.dev
                            pkgs.xorg.libXt
                            pkgs.xorg.libXt.dev
                            pkgs.xorg.libXft
                            pkgs.xorg.libXmu
                            pkgs.xorg.libXi
                            pkgs.mesa
                            pkgs.glxinfo
                            pkgs.freeglut
                            pkgs.glew
                            pkgs.cairo
                       ];
            dependencies = [ opengl-driver ];
            conflicts = conflicts-modules;
        };

        opengl-driver = pkgs.envModuleGen rec {
            name = "opengl-driver";
            moduleFilePrefix = "nix";
            version = "2017.11";
            setRoot = "OPENGL_DRIVER";

            isLibrary = true;
            description = "GL dev module module generated by nix";
            packages = [
                pkgs.nvidia-drivers       
            ];

            ## force the openGL driver in the environment
            extraContent = ''
                prepend-path LD_LIBRARY_PATH  $targetEnv/lib/
                '';

            conflicts = conflicts-modules;
        };


        assimp = pkgs.envModuleGen rec {
            name = "assimp";
            moduleFilePrefix = "nix";
            version = "3.3.1";
            setRoot = "ASSIMP";

            isLibrary = true;
            description = "assimp module module generated by nix";
            packages = [
                            pkgs.assimp
                       ];

            conflicts = conflicts-modules;
        };


        libjpeg-turbo = pkgs.envModuleGen rec {
            name = "jpegturbo";
            moduleFilePrefix = "nix";
            version = "1.5.2";
            setRoot = "JPEGTURBO";

            isLibrary = true;
            description = "libjpeg turbo module module generated by nix";
            packages = [
                            pkgs.libjpeg_turbo
                       ];

            conflicts = conflicts-modules;
        };


        libpng = pkgs.envModuleGen rec {
            name = "libpng";
            moduleFilePrefix = "nix";
            version = "1.6.34";
            setRoot = "LIBPNG";

            isLibrary = true;
            description = "libpng module module generated by nix";
            packages = [
                            pkgs.libpng
                       ];

            conflicts = conflicts-modules;
        };



        virtualgl = pkgs.envModuleGen rec {
            name = "virtualgl";
            moduleFilePrefix = "nix";
            version = "2.5.1-noaliasingfix";
            isLibrary = true;
            description = "virtualgl module generated by nix";
            packages = [
                            pkgs.virtualgl
                       ];

            dependencies = [ opengl-driver ];
            conflicts = conflicts-modules;
        };



        brion = pkgs.envModuleGen rec {
            name = "brion";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "Brion module generated by nix";
            packages = [
                            pkgs.brion
                       ];
            conflicts = conflicts-modules;
        };

        brion-py3 = pkgs.envModuleGen rec {
            name = "brion-py3";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "Brion module generated by nix";
            packages = [
                            pkgs.brion-py3
                       ];
            conflicts = conflicts-modules ++ [ brion ];
        };



        bbpsdk = pkgs.envModuleGen rec {
            name = "bbpsdk";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "BBPSDK module generated by nix";
            packages = [
                            pkgs.bbpsdk
                       ];
            conflicts = conflicts-modules;
        };


        bbpsdk-legacy = pkgs.envModuleGen rec {
            name = "bbpsdk-legacy";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "BBPSDK module generated by nix";
            packages = [
                            pkgs.bbpsdk-legacy
                       ];
            conflicts = conflicts-modules;
        };




        equalizer = pkgs.envModuleGen rec {
            name = "equalizer";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "equalizer module generated by nix";
            packages = [
                            pkgs.equalizer
                       ];
            conflicts = conflicts-modules;
        };


        lunchbox = pkgs.envModuleGen rec {
            name = "lunchbox";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "lunchbox module generated by nix";
            packages = [
                            pkgs.lunchbox
                            pkgs.servus
                       ];
            conflicts = conflicts-modules;
        };


        vmmlib = pkgs.envModuleGen rec {
            name = "vmmlib";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "vmmlib module generated by nix";
            packages = [
                            pkgs.vmmlib
                       ];
            conflicts = conflicts-modules;
        };


        zeroeq = pkgs.envModuleGen rec {
            name = "zeroeq";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "zeroeq module generated by nix";
            packages = [
                            pkgs.zeroeq
                       ];
            conflicts = conflicts-modules;
        };


        rockets = pkgs.envModuleGen rec {
            name = "rockets";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "rockets module generated by nix";
            packages = [
                            pkgs.rockets
                       ];
            conflicts = conflicts-modules;
        };


        zerobuf = pkgs.envModuleGen rec {
            name = "zerobuf";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "zerobuf module generated by nix";
            packages = [
                            pkgs.zerobuf
                       ];
            conflicts = conflicts-modules;
        };


        lexis = pkgs.envModuleGen rec {
            name = "lexis";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "lexis module generated by nix";
            packages = [
                            pkgs.lexis
                       ];
            conflicts = conflicts-modules;
        };


        rtneuron = pkgs.envModuleGen rec {
            name = "rtneuron";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "rtneuron module generated by nix";
            packages = [
                            pkgs.rtneuron pkgs.brion pkgs.bbpsdk pkgs.virtualgl pkgs.equalizer
                       ];
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
            conflicts = conflicts-modules;
        };


        embree = pkgs.envModuleGen rec {
            name = "embree";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "embree module generated by nix";
            packages = [
                            pkgs.embree
                            pkgs.ispc
                       ];
            conflicts = conflicts-modules;
        };



        ospray = pkgs.envModuleGen rec {
            name = "ospray";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "ospray module generated by nix";
            packages = [
                            pkgs.ospray
                            pkgs.ospray-modules
                       ];
            conflicts = conflicts-modules;
            # for ospray-modules plugins loaded by ospray inside LD_LIBRARY_PATH
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
        };

        ospray-devel = pkgs.envModuleGen rec {
            name = "ospray-devel";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "ospray-devel module generated by nix";
            packages = [
                            pkgs.ospray-devel
                            pkgs.ospray-modules
                       ];
            conflicts = conflicts-modules;
            # for ospray-modules plugins loaded by ospray inside LD_LIBRARY_PATH
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
        };

        brayns = pkgs.envModuleGen rec {
            name = "brayns";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "brayns module generated by nix";
            packages = [
                            pkgs.brayns
                       ];
            conflicts = conflicts-modules;
        };

        brayns-devel = pkgs.envModuleGen rec {
            name = "brayns-devel";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "brayns-devel module generated by nix";
            packages = [
                            pkgs.brayns-devel
                       ];
            conflicts = conflicts-modules;
        };

        deflect = pkgs.envModuleGen rec {
            name = "deflect";
            moduleFilePrefix = "nix/viz";

            isLibrary = true;
            description = "deflect module generated by nix";
            packages = [
                            pkgs.deflect
                       ];
            conflicts = conflicts-modules;
        };



        viz = pkgs.envModuleGen {
            name = "VizRelease";
            version = "201711";
            description = "load BBP viz environment generated by nix";
            moduleFilePrefix = "BBP/viz";
            packages = [
                            pkgs.servus
                            pkgs.zerobuf
                            pkgs.zeroeq
                            pkgs.rockets
                            pkgs.lunchbox
                            pkgs.pression
                            pkgs.hwsd
                            pkgs.deflect
                            pkgs.collage
                            pkgs.embree
                            pkgs.ospray
                            pkgs.equalizer
                            pkgs.keyv
                            pkgs.lexis
                            pkgs.osgtransparency
                            pkgs.brion
                            pkgs.rtneuron
                            pkgs.brayns
                       ];
            conflicts = conflicts-modules;


            dependencies = [ python27-full gcc ];
        };


        ## std components

        python27-light = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-light";
            description = "minimalist python 2.7 module generated by nix";
            packages = let pythonPkgs = python27Packages; in [
               # basic C/C++ bundle for pip
               gcc
               stdenv
               # python and module collection
               pkgs.python27Full
               pkgs.bbp-virtualenv
               pythonPkgs.pip
            ];
            conflicts = [ python36-full python36-light ] ++ conflicts-modules;
            dependencies = [ nss-wrapper manylinux1-python ];
        };

        python27-full = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-full";
            isDefault = true;
            description = "complete python environment 2.7 generated by nix";
            packages = let pythonPkgs = python27Packages; in [
               # basic C/C++ bundle for pip
               gcc
               stdenv
               # python and module collection
               mpi4py-py27-bbp
               pkgs.python27Full
               pkgs.bbp-virtualenv
               pythonPkgs.cython
               pythonPkgs.deepdish
               pythonPkgs.enum34
               pythonPkgs.h5py
               pythonPkgs.matplotlib
               pythonPkgs.pyparsing
               pythonPkgs.backports_functools_lru_cache
               pythonPkgs.cycler
               pythonPkgs.numpy
               pythonPkgs.pandas
               pythonPkgs.pytz
               pythonPkgs.dateutil
               pythonPkgs.pip
               pythonPkgs.pycurl
               pythonPkgs.setuptools
               pythonPkgs.sh
               pythonPkgs.six
               pythonPkgs.six
               pythonPkgs.tables
            ];
            conflicts = [ python36-full python36-light ] ++ conflicts-modules;
            dependencies = [ nss-wrapper gcc manylinux1-python ];
        };

        python36-light = with pkgs; pkgs.envModuleGen rec {
            name = "python";
            version = "3.6-light";
            description = "python 3.6 module generated by nix";
            packages = let pythonPkgs = pkgs.python36Packages; in [
               # basic
               gcc
               stdenv
               # python
               python36
               pythonPkgs.pip
               pythonPkgs.virtualenv
            ];
            conflicts = [ python27-light python27-full ] ++ conflicts-modules;
            dependencies = [ nss-wrapper manylinux1-python ];

        };

        python36-full = pkgs.envModuleGen rec {
            name = "python";
            version = "3.6-full";
            description = "python 3.6 module generated by nix";
            packages = let pythonPkgs = pkgs.python36Packages; in [
               pkgs.python36
               pythonPkgs.h5py
               pythonPkgs.numpy
               pythonPkgs.cython
               pythonPkgs.deepdish
               pythonPkgs.enum34
               pythonPkgs.h5py
               pythonPkgs.matplotlib
               pythonPkgs.pyparsing
               pythonPkgs.backports_functools_lru_cache
               pythonPkgs.cycler
               pythonPkgs.numpy
               pythonPkgs.pandas
               pythonPkgs.pytz
               pythonPkgs.dateutil
               pythonPkgs.pip
               pythonPkgs.pycurl
               pythonPkgs.setuptools
               pythonPkgs.sh
               pythonPkgs.six
               pythonPkgs.six
               pythonPkgs.tables
            ];
            conflicts = [ python27-light python27-full ] ++ conflicts-modules;
            dependencies = [ nss-wrapper gcc ];
        };

        cython = pkgs.envModuleGen rec {
            name = "cython";
            isLibrary = true;
            description = "cython module generated by nix";
            packages = [
                            pkgs.cython
                       ];
            conflicts = conflicts-modules ++ [ "cython" ];
        };


        ipython = pkgs.envModuleGen rec {
            name = "ipython";
            isLibrary = true;
            description = "ipython module generated by nix";
            packages = [
                            pkgs.pythonPackages.ipython
                       ]
                       # add all IPython dependencies
                      ++ pkgs.pythonPackages.requiredPythonModules [ pkgs.pythonPackages.ipython ];
            conflicts = conflicts-modules ++ [ "iython" ];
        };

        ipykernel = pkgs.envModuleGen rec {
            name = "ipykernel";
            isLibrary = true;
            description = "ipykernel module generated by nix";
            packages = [
                            pkgs.pythonPackages.ipykernel
                       ] ++ pkgs.pythonPackages.ipykernel.pythonDeps;
            conflicts = conflicts-modules;
        };



        hadoken = pkgs.envModuleGen rec {
            name = "hadoken";
            moduleFilePrefix = "nix";

            isLibrary = true;
            description = "hadoken module generated by nix";
            packages = [
                            (pkgs.hadoken)
                       ];
            conflicts = conflicts-modules;
        };



        rust = pkgs.envModuleGen rec {
            name = "rust";
            version = "1.21";
            description = "rust platform module generated by nix";
            packages = [
                            pkgs.rustc
                            pkgs.cargo
                       ];
        };


        golang = pkgs.envModuleGen rec {
            name = "golang";
            version = "1.9.2";
            description = "golang and packages module generated by nix";
            packages = [
                            pkgs.goPackages.go
                            pkgs.goPackages.net
                            pkgs.goPackages.osext
                       ];
        };


        cmake = pkgs.envModuleGen rec {
            name = "cmake";
            version = "3.9.6";
            description = "cmake 3.9.6 module generated by nix";
            packages = [
                            pkgs.cmakeCurses
                       ];
            conflicts = [ "cmake" ];
        };



        ninja = pkgs.envModuleGen rec {
            name = "ninja";
            version = "1.8.2";
            description = "ninja 1.6.0 module generated by nix";
            packages = [
                            pkgs.ninja
                       ];
            conflicts = [ "ninja" ];
        };


        autotools = pkgs.envModuleGen rec {
            name = "autotools";
            version = "2.69";
            description = "autotools 2.69 module generated by nix";
            packages = [
                            pkgs.automake
                            pkgs.autoconf
                            pkgs.libtool
                       ];
            conflicts = [ "autotools" ];
        };





        vtk = pkgs.envModuleGen rec {
            name = "vtk";
            description = "vtk module generated by nix";
            packages = [
                            pkgs.vtk7
                       ];
            conflicts = [ "vtk" ];
        };


        itk = pkgs.envModuleGen rec {

            name = "itk";
            description = "itk module generated by nix";
            packages = [
                            pkgs.itk
                       ];
            conflicts = [ "itk" ];
        };



        git = pkgs.envModuleGen rec {
            name = "git";
            version = "2.15.0";
            description = "git module generated by nix";
            packages = [
                            pkgs.git 
                       ];
            conflicts = [ "git" ];
        };


        gdb = pkgs.envModuleGen rec {
            name = "gdb";
            version = "8.0.1";
            moduleFilePrefix = debugger-prefix;
            description = "gdb module generated by nix";
            packages = [
                            pkgs.gdb
                       ];
            conflicts = [ "gdb" ];
        };


        uftrace = pkgs.envModuleGen rec {
            name = "uftrace";
            version = "0.7";
            moduleFilePrefix = profiler-prefix;
            description = "uftrace module generated by nix";
            packages = [
                            pkgs.uftrace
                       ];
            conflicts = [ "uftrace" ];
        };



        valgrind = pkgs.envModuleGen rec {
            name = "valgrind";
            version = "3.13.0";
            moduleFilePrefix = debugger-prefix;
            description = "valgrind module generated by nix";
            packages = [
                            pkgs.valgrind
                       ];
            conflicts = [ "valgrind" ];
        };



        mercurial = pkgs.envModuleGen rec {
            name = "mercurial";
            version = "4.3.2";
            description = "mercurial module generated by nix";
            packages = [
                            pkgs.mercurial
                       ];
            conflicts = [ "mercurial" ];
        };


        boost = pkgs.envModuleGen rec {
            name = "boost";
            version = "1.59";
            isLibrary = true;
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "boost 1.59 module generated by nix";
            packages = if isBlueGene then [
                            pkgs.bgq-boost-gcc47.crossDrv.dev
                            pkgs.bgq-boost-gcc47.crossDrv.lib
                       ] else [
                            pkgs.boost.dev pkgs.boost
                       ];
            conflicts = conflicts-modules ++ [ "boost" ];
        };


        qt5 = pkgs.envModuleGen rec {
            name = "qt5";
            isLibrary = true;
            description = "qt-5 module generated by nix";
            packages = [
                            pkgs.qt5.qtbase
                            pkgs.qt5.qtdeclarative
			    pkgs.qt5.qtquick1
			    pkgs.qt5.qtquickcontrols
                      ];
            conflicts = conflicts-modules ++ [ "qt" ];

     	    extraContent = ''
		prepend-path QML2_IMPORT_PATH $targetEnv/lib/qt5/qml

	    '';
        };


        pyqt5 = pkgs.envModuleGen rec {
            name = "pyqt5";
            isLibrary = true;
            description = "qt-5 module generated by nix";
            packages = [
                            pkgs.pythonPackages.pyqt5
                            pkgs.pythonPackages.sip
                       ];
            conflicts = conflicts-modules ++ [ "qt" ];    
	    dependencies = [ qt5 ];

        };

        elephant = pkgs.envModuleGen rec {
            name = "elephant";
            isLibrary = true;
            description = "elephant module generated by nix";
            packages = [
                            pkgs.pythonPackages.elephant
                       ] ++ pkgs.pythonPackages.elephant.pythonDeps ;
            conflicts = conflicts-modules;    
        }; 


        openblas = pkgs.envModuleGen rec {
            name = "openblas";
            moduleFilePrefix = nix-target-prefix;

            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas module generated by nix";
            packages = [
                            ( if isBlueGene then pkgs.bgq-openblas.crossDrv
                            else pkgs.openblasCompat)
                       ];

            extraContent = ''
                setenv ATLAS None
                setenv BLAS $targetEnv/lib/libopenblas.so
                setenv OPENBLAS $targetEnv/lib/libopenblas.so
           '';


            conflicts = conflicts-modules ++ [ openblas64ABI ];
        };



        openblas64ABI = pkgs.envModuleGen rec {
            name = "openblas-64abi";
            moduleFilePrefix = nix-target-prefix;

            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas Compatibility module generated by nix";
            packages = [
                            pkgs.openblas
                       ];

            extraContent = ''
                setenv ATLAS None
                setenv BLAS $targetEnv/lib/libopenblas.so
                setenv OPENBLAS $targetEnv/lib/libopenblas.so
           '';


            conflicts = conflicts-modules ++ [ openblas ];
        };


        folly = pkgs.envModuleGen rec {
            name = "folly";
            isLibrary = true;
            setRoot = "FOLLY";
            description = "folly module generated by nix";
            packages = [
                            pkgs.folly pkgs.openssl pkgs.glog pkgs.libevent
                       ];
            conflicts = conflicts-modules;
        };


        abseil = pkgs.envModuleGen rec {
            name = "abseil";
            isLibrary = true;
            setRoot = "ABSEIL";
            description = "abseil module generated by nix";
            packages = [
                            pkgs.abseil-cpp pkgs.cctz
                       ];
            conflicts = conflicts-modules;
        };




        openssl = pkgs.envModuleGen rec {
            name = "openssl";
            version = "1.0.2m";
            setRoot = "OPENSSL";
            description = "openssl module generated by nix";
            packages = [
                            pkgs.openssl
                       ];
            conflicts = conflicts-modules;


        };


        mvapich2 = pkgs.envModuleGen rec {
            name = "mvapich2";
            isLibrary = true;
            description = "mvapich2 module generated by nix";
            packages = [
                            (if (pkgs.bbp-mpi == pkgs.mvapich2) then pkgs.mvapich2 else pkgs.mvapich2-hydra)
                       ];
            conflicts = conflicts-modules;
        };

        mvapich2-hydra = pkgs.envModuleGen rec {
            name = "mvapich2-hydra";
            isLibrary = true;
            description = "mvapich2 module generated by nix";
            packages = [
                            pkgs.mvapich2-hydra
                       ];
            conflicts = conflicts-modules;
        };



        mvapich2-rdma = pkgs.envModuleGen rec {
            name = "mvapich2-rdma";
            isLibrary = true;
            isDefault = true;
            description = "mvapich2 module generated by nix";
            packages = [
                            pkgs.mvapich2-rdma
                            ## add slurm for libpmi dependencies
                            ## pkgs.slurm-llnl
                       ];
            conflicts = conflicts-modules;

            extraContent = ''setenv MV2_ENABLE_AFFINITY "0" '';
        };

        intel-mpi-bench-rdma = pkgs.envModuleGen rec {
            name = "intel-mpi-bench";
            version = "2017-mvapich2-rma";

            description = "mvapich2 module generated by nix";
            packages = [
                            pkgs.intel-mpi-bench-rdma
                       ];
            conflicts = conflicts-modules;
        };

        ib-dev = if ( default_mpi_rdma != default_mpi ) then
                pkgs.envModuleGen rec {
                name = "ib-dev";
                version = "2017.11";
                isLibrary = true;

                description = "infiniband module generated by nix";
                packages = [
                                pkgs.ibverbs-upstream
                                pkgs.rdmacm-upstream
                           ];
                conflicts = conflicts-modules;
        } else null;


        hdf5 = pkgs.envModuleGen rec {
            name = "hdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault = true;
            moduleFilePrefix = nix-target-prefix;

            description = "hdf5 module generated by nix";
            packages = [
                            (if isBlueGene then pkgs.bgq-hdf5-gcc47.crossDrv
                             else pkgs.hdf5)
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" phdf5 hdf5-cpp ];
        };


        hdf5-cpp = pkgs.envModuleGen rec {
            name = "hdf5-cpp";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "hdf5 module with C++ bindings generated by nix";
            packages = [

                            pkgs.hdf5-cpp
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" phdf5 hdf5 ];
        };


       phdf5 = pkgs.envModuleGen rec {
            name = "phdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "parallel hdf5 module generated by nix";
            packages = [
                            pkgs.phdf5
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" hdf5 hdf5-cpp ];
        };


        adios = pkgs.envModuleGen rec {
            name = "adios";
            isLibrary = true;
            setRoot = "ADIOS";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "parallel hdf5 module generated by nix";
            packages = [
                            pkgs.adios
                       ];
            conflicts = conflicts-modules ++ [ "ADIOS" ];
        };

        readline = pkgs.envModuleGen rec {
            name = "readline";
            version = "6.3";
            isLibrary = true;
            setRoot = "READLINE";
            description = "readline module generated by nix";
            packages = [
                            pkgs.readline
                       ];
            conflicts = conflicts-modules ++ [ "readline" ];
        };

        ncurses = pkgs.envModuleGen rec {
            name = "ncurses";
            isLibrary = true;
            version = "5.9";
            setRoot = "NCURSES";
            description = "ncureses module generated by nix";
            packages = [
                            pkgs.ncurses
                       ];
            conflicts = conflicts-modules ++ [ "ncurses" ];
        };


        petsc = pkgs.envModuleGen rec {
            name = "petsc";
            version = "3.7";
            isLibrary = true;
            description = "PETSc module generated by nix";
            packages = [
                            pkgs.petsc
                       ];
            conflicts = conflicts-modules;
        };

        scorec = pkgs.envModuleGen rec {
            name = "scorec";
            isLibrary = true;
            description = "SCOREC module generated by nix";
            packages = [
                            pkgs.scorec
                       ];
            conflicts = conflicts-modules;
        };


        hwloc = pkgs.envModuleGen rec {
            name = "hwloc";
            isLibrary = true;
            description = "HWLOC module generated by nix";
            packages = [
                            pkgs.hwloc
                       ];
            conflicts = conflicts-modules;
        };




        libxml2 = pkgs.envModuleGen rec {
            name = "libxml2";
            isLibrary = true;
            isDefault = true;
            setRoot = "LIBXML2";
            moduleFilePrefix = nix-target-prefix;

            description = "libxml2 module generated by nix";
            packages = [
                            (if isBlueGene then pkgs.bgq-libxml2-gcc47.crossDrv
                             else pkgs.libxml2)

                            (if isBlueGene then pkgs.all-pkgs-bgq-gcc47.libxslt.crossDrv
                             else pkgs.libxslt)

                       ];
            conflicts = conflicts-modules;
        };


        libspatialindex = pkgs.envModuleGen rec {
            name = "libspatialindex";
            version = "1.8.1";
            isLibrary = true;
            setRoot = "SPATIALINDEX";
            moduleFilePrefix = nix-target-prefix;

            description = "spatialindex module generated by nix";
            packages = [
                            pkgs.libspatialindex
                            pkgs.pythonPackages.rtree
                       ];
            conflicts = conflicts-modules;
        };

        zlib = pkgs.envModuleGen rec {
            name = "zlib";
            version = "1.2.11";
            isLibrary = true;
            isDefault = true;
            setRoot = "ZLIB";
            moduleFilePrefix = nix-target-prefix;

            description = "zlib module generated by nix";
            packages = (if isBlueGene 
                        then [ pkgs.bgq-zlib-gcc47.crossDrv ]
                        else [ pkgs.zlib pkgs.zlib.dev pkgs.zlib.static pkgs.lz4 ]
                       );
                       
            conflicts = conflicts-modules;
        };

        sdl2 = pkgs.envModuleGen rec {
            name = "sdl2";
            version = "2.0.7";
            setRoot = "SDL2";
            moduleFilePrefix = nix-target-prefix;

            description = "sdl module generated by nix";
            packages = [
                            pkgs.SDL2
                       ];
            conflicts = conflicts-modules;
        };


        bison = pkgs.envModuleGen rec {
            name = "bison";
            version = "3.0.4";
            isLibrary = true;
            description = "bison module generated by nix";
            packages = [
                            pkgs.bison
                       ];
            conflicts = conflicts-modules;
        };

        flex = pkgs.envModuleGen rec {
            name = "flex";
            version = "2.6.4";
            isLibrary = true;
            description = "flex module generated by nix";
            packages = [
                            pkgs.flex
                       ];
            conflicts = conflicts-modules;
        };


        swig = pkgs.envModuleGen rec {
            name = "swig";
            version = "3.0.12";
            isLibrary = true;
            description = "swig module generated by nix";
            packages = [
                            pkgs.swig
                       ];
            conflicts = conflicts-modules;
        };

        gsl = pkgs.envModuleGen rec {
            name = "gsl";
            version = "2.4";
            isLibrary = true;
            setRoot = "GSL";
            description = "gsl module generated by nix";
            packages = [
                            pkgs.gsl
                       ];
            conflicts = conflicts-modules;
        };

        tbb = pkgs.envModuleGen rec {
            name = "tbb";
            isLibrary = true;
            setRoot = "TBB";
            description = "TBB (Thread Building Block) Library ";
            packages = [
                            pkgs.tbb

                        ];
            conflicts = conflicts-modules;

        };

        llvm = pkgs.envModuleGen rec {
            name = "llvm";
            isLibrary = true;
            version = "4.0.1";
            setRoot = "LLVM";
            description = "Low level Virtual Machine ";
            packages = [
                            pkgs.llvm

                        ];
            conflicts = conflicts-modules;

        };

        gmp = pkgs.envModuleGen rec {
            name = "gmp";
            isLibrary = true;
            version = "6.1.2";
            setRoot = "GMP";
            description = "libgmp module";
            packages = [
                            pkgs.gmp

                        ];
            conflicts = conflicts-modules;

        };


        gcc72 = pkgs.envModuleGen rec {
            name = "gcc7";
            version = "7.2.0";
            description = "gcc 7.2.0 module generated by nix";
            packages = [
                            pkgs.gcc7
                       ];
            conflicts = [ gcc  clang];
            extraContent = ''
                append-path --delim " " NIX_CFLAGS_COMPILE "-I${pkgs.gcc7.cc}/include"
                append-path --delim " " NIX_LDFLAGS "-L${pkgs.gcc7.cc}/lib"
            '';
        };

        gcc = pkgs.envModuleGen rec {
            name = "gcc";
            version = "6.4.0";
            description = "gcc 6.4.0 module generated by nix";
            isDefault = true;
            isCompiler = true;
            packages = [
                            pkgs.gcc
                       ];
            conflicts = [ gcc72  clang icc ];

            # enforce inclusiong of compiler lib/include path first to
            # defend against badly done compilation script
            extraContent = ''
                append-path --delim " " NIX_CFLAGS_COMPILE "-I${pkgs.gcc.cc}/include"
                append-path --delim " " NIX_LDFLAGS "-L${pkgs.gcc.cc}/lib"
            '';

        };

        clang = pkgs.envModuleGen rec {
            name = "clang";
            version= "4.0.1";
            description = "clang 4.0.1 module generated by nix";
            isLibrary = true;
            isCompiler = true;
            packages = [
                            pkgs.clang
                       ];
            conflicts = [ gcc  gcc72 icc];
        };

        icc = if (pkgs.WrappedICC != null) then (pkgs.envModuleGen rec {
            name = "icc";
            version= "2017";
            description = "Intel Compiler module generated by nix";
            isLibrary = true;
            isCompiler = true;
            packages = [
                            pkgs.WrappedICC
                       ];
            conflicts = [ gcc  gcc72 clang ];
        }) else null;

        mkl = if (pkgs.WrappedICC != null) then (pkgs.envModuleGen rec {
            name = "mkl";
            version= "2017";
            description = "Intel MKL module generated by nix";
            isLibrary = true;
            packages = [
                            pkgs.intel-mkl
                       ];
            conflicts = [ openblas ];
        }) else null;


       cuda8 = pkgs.envModuleGen rec {
            name = "cuda";
            version= "8.0";
            setRoot = "CUDA";
            description = "cuda 8.0 module generated by nix";
            isLibrary = true;
            packages = [
                            pkgs.cudatoolkit8
                       ];
            conflicts = [  cuda8 ];
            dependencies = [ opengl-driver gcc ];
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
        };

        R = pkgs.envModuleGen rec {
            name = "R";
            version = "3.4.3";
            description = "R module generated by nix";
            packages = [
                            pkgs.R
                       ];
        };

        rocksdb  = pkgs.envModuleGen rec {
            name = "rocksdb";
            version = "${pkgs.rocksdb.version}";
            isLibrary = true;
            description = "Rocksdb module generated by nix";
            packages = [
                pkgs.rocksdb
           ];
        };

        zeromq  = pkgs.envModuleGen rec {
            name = "zeromq";
            version = "4.2.2";
            isLibrary = true;
            setRoot = "ZEROMQ";
            description = "zeromq module generated by nix";
            packages = [
                            pkgs.zeromq
                       ];
        };


        freetype = pkgs.envModuleGen rec {
            name = "freetype";
            version = "2.5.4";
            isLibrary = true;
            setRoot = "FREETYPE";
            description = "freetype module generated by nix";
            packages = [ pkgs.freetype ];
        };

        bazel = pkgs.envModuleGen rec {
            name = "bazel";
            version = "20150326.981b7bc1";
            setRoot = "BAZEL";
            description = "Bazel module generated by nix";
            packages = [ pkgs.bazel ];
        };

        #
        # machine learning
        #
        caffe2 = pkgs.envModuleGen rec {
            name = "caffe2";
            version = "0.8-201707";
            setRoot = "CAFFE2";
            description = "caffe  module generated by nix";
            packages = [ pkgs.caffe2 ];
        };

        tensorflow = pkgs.envModuleGen rec {
            name = "tensorflow";
            setRoot = "TENSORFLOW";
            description = "tensorflow module generated by nix";
            packages = [
                pkgs.tensorflow
            ] ++ pkgs.tensorflow.pythonDeps;
        };

        tensorflow-py3 = pkgs.envModuleGen rec {
            name = "tensorflow-py3";
            setRoot = "TENSORFLOW";
            description = "tensorflow module generated by nix";
            packages = [
                pkgs.tensorflow-py3
            ] ++ pkgs.tensorflow-py3.pythonDeps;
        };

        scikit-learn = pkgs.envModuleGen rec {
                name = "scikit-learn";
                setRoot = "SCIKIT";
                description = "scikit-learn module generated by nix";
                packages = [
                    pkgs.pythonPackages.scikit-learn
                ] ++ pkgs.pythonPackages.scikit-learn.pythonDeps;
            };

        set = rec {
            vcs = [
                git mercurial
                #build tools
                cmake
                ninja
            ];
            
            dbg = [
                gdb
                valgrind
                uftrace
            ];
            
            compilers = [
                gcc
                clang
                icc
            ];
        
            dev_base_pkgs = [                           # VCS
                # libs
                default_mpi
                boost
                zlib
                hdf5
                libxml2
                openblas
                openssl
                swig
                readline
                ncurses
                gldev
                freetype
                gmp
                cmake
                autotools
                ninja
            ];
            
            dev_toolkit_pkgs = [
                bison
                flex
                libpng
                hadoken
                libspatialindex
                sdl2
                folly
                abseil
                rocksdb
                hwloc
                highfive 
                llvm
                zeromq            
            ];
            
            dev_viz = [
                assimp
                libjpeg-turbo
                virtualgl
                glxinfo
                gldev                
            ];
            
            sciences_base = [
                phdf5
                hdf5-cpp
                gsl
            ];
            
            ml_base = [
                caffe2
                scikit-learn 
                tensorflow 
                tensorflow-py3                     
            ];
            
            python_base = [
                python27-light
                python27-full
                manylinux1-python
                cython
                ipython
                ipykernel
                elephant 
            ];
            
            python3_base = [
                python36-light
                python36-full
            ];
            
           large_toolkit = [
                adios 
                petsc
                scorec
                vtk
                itk 
                qt5
                # pyqt5                 
            ];
            
            
            system_pkgs = [ 
                nss-wrapper
                opengl-driver
            ];
            
            parallel_toolkit = [
                tbb     
                mkl                       
            ];
        
            base = vcs ++ dbg ++ dev_base_pkgs;
        
            nse_base = [
                neurom
                bluepy
            ];
            
            nse_legacy = [
                bluejittersdk
                bluerepairsdk
                morphscale      
                morphsyn
                muk
                placement-algorithm
            ];            
            
            viz = [
                lunchbox
                brion
                brion-py3
                rockets
                zeroeq
                zerobuf
                lexis
                vmmlib
                bbpsdk 
                rtneuron 
                equalizer
                bbpsdk-legacy
                embree
                ospray
                ospray-devel
                deflect
            ];
            
            hpc_base = [
                helloworld
                mvdtool
                morphotool
                syntool
                morphomesher
                hpcbench
            ];
            
            hpc_circuit = [
                hpctools
                functionalizer
                touchdetector
                bluebuilder
                pytouchreader    
                flatindexer
                flatindexer-py3  
                spykfunc spykfunc-py3
            ];
            
            hpc_simulators = [
                neurodamus
                neurodamus-savestate
                neurodamus-hippocampus
                neurodamus-simplification
                neuron
                reportinglib
                nest
                mod2c
                coreneuron
                learningengine
                neuron-nomultisend                           
            ];
            
            hpc_larges = [
                steps
                neuromapp
            ];       
        };


        dev-env-gcc = pkgs.envModuleGen rec {
            name = "dev-env-gcc";
            version = "09.2016";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            gcc
                        ] ++ set.dev_base_pkgs;
           conflicts = conflicts-modules;
        };

        dev-env-clang = pkgs.envModuleGen rec {
            name = "dev-env-clang";
            version = "09.2016";
            description = "clang development environment from nix";
            dependencies = [
                            # compiler
                            clang
                        ] ++ set.dev_base_pkgs;

            conflicts = conflicts-modules;
        };

        dev-env-icc = if ( icc != null) then pkgs.envModuleGen rec {
            name = "dev-env-icc";
            version = "09.2016";
            description = "Intel Compiler development environment from nix";
            dependencies = [
                            # compiler
                            icc
                        ] ++ set.dev_base_pkgs;
            conflicts = conflicts-modules;
        } else null;


        dev-env-python27 = pkgs.envModuleGen rec {
            name = "dev-env-python27";
            version = "2017";
            description = "python development environment from nix";
            dependencies = [
                            # compiler
                            python27-light 
                            ] ++ set.dev_base_pkgs ++ [ gcc ] ;
           conflicts = conflicts-modules;
        };



        all = pkgs.buildEnv {
        name = "all-modules";
        paths =
            set.vcs
            ++ set.dbg
            ++ set.dev_base_pkgs
            ++ set.ml_base
            ++ set.sciences_base
            ++ set.dev_viz
            ++ set.compilers
            ++ set.dev_toolkit_pkgs
            ++ set.large_toolkit
            ++ set.viz
            ++ set.nse_base
            ++ set.nse_legacy
            ++ set.hpc_base
            ++ set.hpc_circuit
            ++ set.hpc_simulators
            ++ set.python_base
	    ++ set.python3_base
            ++ set.system_pkgs
            ++ set.parallel_toolkit
            ++ [

                # hpc team
                # dev env
                dev-env-gcc
                dev-env-python27
            ];
        };

        ## benchmark utilities

        benchs = pkgs.buildEnv {
            name = "all-benchs";
            paths = [
                hpl
                ior
                iperf
                mdtest
                perftest
                shoc
                stream
            ];
        };

        ## utilities

        ## map libnss plugins in your LD_PATH to solve auth issues
        nss-wrapper = pkgs.envModuleGen rec {
            name = "nss-wrapper";
            version = "1.0";
            isLibrary = true;
            description = "nss-wrapper, map local authentication plugins in your environment";
            packages = [
                            pkgs.libnss-native-plugins
                       ];
            conflicts = conflicts-modules;
            extraContent = "prepend-path LD_LIBRARY_PATH $targetEnv/lib/";
        };


        ## environment containing all required dependencies for manylinux1
        manylinux1-python = pkgs.envModuleGen rec {
            name = "manylinux1-python";
            version = "1.0";
            isLibrary = true;
            description = "provide all library for python manylinux requirement";
            packages = [
                            pkgs.manylinux1
                       ];
            conflicts = conflicts-modules;
        };




        ## extra not portable softwares
        papi = pkgs.envModuleGen rec {
            name = "papi";
            isLibrary = true;
            description = "papi module generated by nix";
            packages = [
                            pkgs.papi
                       ];
            conflicts = conflicts-modules;
        };


        hpctoolkit = pkgs.envModuleGen rec {
            name = "hpctoolkit";
            isLibrary = true;
            moduleFilePrefix = profiler-prefix;
            description = "hpctoolkit module generated by nix";
            packages = [
                            pkgs.hpctoolkit
                       ];
            conflicts = conflicts-modules;
        };

        extra = pkgs.buildEnv {
        name = "extra-modules";
        paths =
        set.hpc_larges
         ++ [
            papi
            # hpctoolkit
            dev-env-clang dev-env-icc
            cuda8

            #gmsh
            blender
            intel-mpi-bench-rdma

            #rdma local specific
            default_mpi_rdma
            ib-dev

        ];
        };

};

non-bgq-modules =
    if ((import ../../bluegene/portability.nix).isBlueGene)
    then { }
    else with generic-modules; rec {
        steps-py3 = pkgs.envModuleGen rec {
            name = "steps";
            moduleFilePrefix = "nix/hpc";
            isLibrary = true;
            description = "steps module generated by nix";
            packages = [ pkgs.steps-mpi-py3 ];
            conflicts = conflicts-modules;
        };
    };

bgq-modules =
(if  ((import ../../bluegene/portability.nix).isBlueGene == false)
then { }
else
with generic-modules; rec {

      bgq-gcc = pkgs.envModuleGen rec {
            name = "gcc";
            version = "4.1.4";
            moduleFilePrefix = "nix/bgq";
            description = "GCC compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.gcc-bgq
                       ];
      };

      bgq-ibm-mpi = pkgs.envModuleGen rec {
            name = "mpich2";
            version = "1.5-gcc";
            moduleFilePrefix = "nix/bgq";
            isDefault = true;
            isLibrary = true;
            description = "Official BGQ MPI backend  generated by nix";
            packages = [
                            pkgs.ibm-mpi.crossDrv
                       ];
      };




     bgq-boost = pkgs.envModuleGen rec {
            name = "boost";
            version = "1.58.0-xlc";
            moduleFilePrefix = "nix/bgq";

            isLibrary = true;
            description = "boost for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-boost.dev pkgs.bgq-boost.lib
                       ];
      };

      bgq-mpich2 = pkgs.envModuleGen rec {
            name = "mpich2";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "mpich for BGQ, Rob's forked version generated by nix";
            packages = [
                            pkgs.bg-mpich.crossDrv
                       ];
      };



    phdf5 = pkgs.envModuleGen rec {
            name = "phdf5";
            isLibrary = true;
            setRoot = "HDF5";
            isDefault= true;
            moduleFilePrefix = nix-target-prefix;

            description = "hdf5 module generated by nix";
            packages = [
                            pkgs.bgq-phdf5-gcc47.crossDrv
                       ];
            conflicts = conflicts-modules ++ [ "hdf5" ];
        };



     bgq-hdf5 = pkgs.envModuleGen rec {
            name = "hdf5";
            moduleFilePrefix = "nix/bgq";
            version = "1.8.14-xlc";
            setRoot = "HDF5";
            isLibrary = true;
            description = "hdf5 for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-hdf5
                       ];
      };


     bgq-libxml2 = pkgs.envModuleGen rec {
            name = "libxml2";
            version = "2.9.7-xlc";
            moduleFilePrefix = "nix/bgq";

            description = "libxml2 for BGQ backend  generated by nix";
            isLibrary = true;
            packages = [
                            pkgs.bgq-libxml2
                       ];
      };



      bgq-cmake = pkgs.envModuleGen rec {
            name = "cmake";
            version = "3.3.2";
            moduleFilePrefix = "nix/bgq";
            description = "cmake for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-cmake
                       ];
      };




     bgq-zlib = pkgs.envModuleGen rec {
            name = "zlib";
            version = "1.2.8-xlc";
            setRoot = "ZLIB";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "zlib for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-zlib
                       ];
      };



     bgq-glibc = pkgs.envModuleGen rec {
            name = "glibc";
            version = "2.17";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "glibc in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.bglibc
                       ];
      };


     bgq-gcc47 = pkgs.envModuleGen rec {
            name = "gcc";
            version = "4.7.4";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "GCC 4.7.4 in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.bg-gcc47
                       ];
            conflicts = [ bgq-gcc ];
      };


     bgq-xlc = pkgs.envModuleGen rec {
            name = "xlc";
            version = "12.1";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "XLC in cross compiler mode for compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.xlc
                       ];
            conflicts = [ bgq-gcc ];
      };


     bgq-mpi-xlc = pkgs.envModuleGen rec {
            name = "mpich2";
            version = "1.5-xlc";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "MPI with XLC compiler for BGQ backend  generated by nix";
            packages = [
                            pkgs.ibm-mpi-xlc
                       ];
            conflicts = [ bgq-gcc ];
      };


      bgq-python27-light = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-light";
            moduleFilePrefix = "nix/bgq";
            description = "minimalist python 2.7 for BGQ backend generated by nix";
            packages = let pythonPkgs = python27Packages;
                         in
                        [
                            # basic C/C++ bundle for pip
                            pkgs.bg-gcc47
                            pkgs.bgq-stdenv-gcc47

                            # python and module collection
                            pkgs.bgq-python27-gcc47.crossDrv
                            pkgs.pythonPackages.cython
                            pkgs.pythonPackages.pip
                            pkgs.pythonPackages.virtualenv
                       ];
            conflicts = [ bgq-python27-full  ] ++ conflicts-modules;
      };

      bgq-python27-full = with pkgs; envModuleGen rec {
            name = "python";
            version = "2.7-full";
            isDefault = true;
            moduleFilePrefix = "nix/bgq";
            description = "minimalist python 2.7 for BGQ backend generated by nix";
            packages =
            let pythonPkgs = python27Packages;
                in
                [
                    # basic C/C++ bundle for pip
                    pkgs.bg-gcc47
                    pkgs.bgq-stdenv-gcc47

                    # python and module collection
                    bgq-pythonPackages-gcc47.bg-h5py.crossDrv
                    bgq-pythonPackages-gcc47.bg-matplotlib.crossDrv
                    bgq-pythonPackages-gcc47.bg-mpi4py.crossDrv
                    bgq-pythonPackages-gcc47.nose.crossDrv
                    bgq-pythonPackages-gcc47.pyparsing.crossDrv
                    bgq-pythonPackages-gcc47.six.crossDrv
                    pkgs.bgq-python27-gcc47.crossDrv
                    pkgs.bgq-pythonPackages-gcc47.bg-numpy.crossDrv

                    pkgs.pythonPackages.cython
                    pkgs.pythonPackages.enum34
                    pkgs.pythonPackages.pip
                    pkgs.pythonPackages.setuptools
                    pkgs.pythonPackages.virtualenv
               ];
            conflicts = [ bgq-python27-light ] ++ conflicts-modules;
      };


      bgq-openssl = pkgs.envModuleGen rec {
            name = "openssl";
            version  = "1.0.1s";
            setRoot = "OPENSSL";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "openssl for BGQ backend  generated by nix";
            packages = [
                            pkgs.all-pkgs-bgq-gcc47.openssl
                       ];
      };


     openblas-static = pkgs.envModuleGen rec {
            name = "openblas-static";
            moduleFilePrefix = nix-target-prefix;

            setRoot = "OPENBLAS";
            isLibrary = true;
            description = "openblas module generated by nix";
            packages = [
                            ( if isBlueGene then pkgs.bgq-openblas-static.crossDrv
                            else pkgs.openblas)
                       ];
            conflicts = conflicts-modules;
        };



      bgq-gsl = pkgs.envModuleGen rec {
            name = "gsl";
            version  = "1.16";
            setRoot = "GSL";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "gsl for BGQ backend  generated by nix";
            packages = [
                            pkgs.all-pkgs-bgq-gcc47.gsl.crossDrv
                       ];
      };


      bgq-petsc = pkgs.envModuleGen rec {
            name = "petsc";
            setRoot = "PETSC";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "petsc for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-petsc-gcc47.crossDrv
                       ];
      };

      bgq-petsc-nodebug = pkgs.envModuleGen rec {
            name = "petsc-nodebug";
            setRoot = "PETSC";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "petsc for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-petsc-gcc47-nodebug.crossDrv
                       ];
      };



      bgq-scorec = pkgs.envModuleGen rec {
            name = "scorec";
            setRoot = "SCOREC";
            moduleFilePrefix = "nix/bgq";
            isLibrary = true;
            description = "SCOREC for BGQ backend  generated by nix";
            packages = [
                            pkgs.bgq-scorec-gcc47.crossDrv
                            pkgs.bgq-parmetis-gcc47.crossDrv
                            pkgs.bgq-zoltan-gcc47.crossDrv
                       ];
      };



      bgq_dev_env_pkgs_gcc = [
        hdf5 libxml2 bison flex boost zlib openblas bgq-ibm-mpi bgq-cmake bgq-glibc

      ];

      bgq_dev_env_gcc = pkgs.envModuleGen rec {
            name = "dev-env-gcc";
            version = "02.2017";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            bgq-gcc47
                             ] ++ bgq_dev_env_pkgs_gcc;
           conflicts = conflicts-modules;
        };


      bgq-dev_base_pkgs-xlc = [
        bgq-hdf5 bgq-libxml2 bgq-boost bgq-zlib bgq-mpi-xlc bgq-cmake

      ];

      bgq-dev-env-xlc = pkgs.envModuleGen rec {
            name = "dev-env-xlc";
            version = "02.2017";
            description = "GCC development environment from nix";
            dependencies = [
                            # compiler
                            bgq-xlc
                             ] ++ bgq-dev_base_pkgs-xlc;
           conflicts = conflicts-modules;
        };



      bgq-neuron = neuron.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc ];
        # additional override
        extraContent = ''
            prepend-path LD_LIBRARY_PATH $PYTHONHOME/lib
           '';
      };

      bgq-neurodamus = neurodamus.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc bgq-neuron ];
        # additional override
        extraContent = ''
            setenv BBP_HOME $targetEnv/
           '';
      };



      bgq-neurodamus-savestate = neurodamus-savestate.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc bgq-neuron ];
        # additional override
        extraContent = ''
            setenv BBP_HOME $targetEnv/
           '';
      };

      bgq-neurodamus-hippocampus = neurodamus-hippocampus.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc bgq-neuron ];
        # additional override
        extraContent = ''
            setenv BBP_HOME $targetEnv/
           '';
      };




      bgq-coreneuron = coreneuron.override {
        # override compiler to use mpi XLC
        dependencies = [ bgq-mpi-xlc ];
        extraContent = ''
            setenv BBP_HOME $targetEnv/
           '';

      };
      bgq-mod2c = mod2c;

      all = pkgs.buildEnv {
        name = "all-modules";
        paths =
        [
            # bgq XLC based modules
            bgq-boost bgq-hdf5 bgq-libxml2 bgq-zlib

            ## bgq GCC based modules
            hdf5 phdf5 libxml2 bison flex boost zlib openblas openblas-static

            # bgq packages common
            bgq-python27-light bgq-python27-full
            bgq-openssl  bgq-petsc bgq-petsc-nodebug bgq-scorec bgq-gsl

            bgq-cmake

            #BGQ compiler and mpi
            bgq-mpi-xlc bgq-gcc  bgq-ibm-mpi bgq-gcc47 bgq-xlc bgq-mpich2 bgq-glibc

            #dev enbs
            bgq_dev_env_gcc bgq-dev-env-xlc

            # hpc team
            mvdtool hpctools functionalizer touchdetector steps helloworld
            bgq-coreneuron 
            bgq-neurodamus bgq-neurodamus-savestate bgq-neurodamus-hippocampus bgq-mod2c
            bgq-neuron
            nest 
        ];
      };

      extra = all;

      benchs = all;

      hpc = pkgs.envModuleGen {
            name = "HPCrelease_BGQ";
            description = "load BBP HPC environment on BGQ module generated by nix";
            moduleFilePrefix = "BBP/hpc";
            packages =
            [
                pkgs.functionalizer pkgs.functionalizer.doc
                pkgs.touchdetector  pkgs.touchdetector.doc
                pkgs.bluebuilder
                pkgs.highfive
                pkgs.mvdtool

                # cellular sim
                pkgs.coreneuron
                pkgs.mod2c
                pkgs.neurodamus
                pkgs.neuron
                pkgs.reportinglib

                # required library for nrnivmdl
                pkgs.readline
                pkgs.ncurses
                pkgs.bgq-hdf5
                pkgs.bgq-zlib

                # default compiler
            ];

            extraContent = "setenv BBP_HOME $targetEnv/";

            dependencies = [ bgq-mpi-xlc ];

     };



});

in
  generic-modules // bgq-modules // non-bgq-modules
