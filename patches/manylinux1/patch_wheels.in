#!/bin/bash


# path
export PATCHELF_BIN=@patchelf@/bin/patchelf
export LD_SO_PATH=@glibc_path@/lib/ld-linux-x86-64.so.2

export SITE_PACKAGE_DIR=${VIRTUAL_ENV}/lib/python2.7/site-packages
export MANYLINUX_LIBDIR=@manylinux_path@/lib



if [[ -z "${VIRTUAL_ENV}" ]] || [[ ! -d "${VIRTUAL_ENV}" ]]; then
    echo -e "\n\n\tError: patch_wheels should be used inside a virtualenv\n\n" >&2
    exit 1

fi



export LIST_MODULES="$(find ${SITE_PACKAGE_DIR} -name "*.so*" -type f -print)"


function patch_python_wheel {
    WHEEL_PATH="$1"
    WHEEL_RPATH="$(${PATCHELF_BIN} --print-rpath ${WHEEL_PATH})"
    WHEEL_OWN_DIR="$(dirname ${WHEEL_PATH})"
    #echo "$WHEEL_RPATH"

    # redefine ld to the nix one
    # silence error, when module does not have interpreter 
    ${PATCHELF_BIN} --set-interpreter ${LD_SO_PATH} ${WHEEL_PATH} 2> /dev/null

    # redefine the RPATH to the nix one inside manylinux1
    ${PATCHELF_BIN} --set-rpath "${MANYLINUX_LIBDIR}:${WHEEL_OWN_DIR}:${WHEEL_RPATH}" ${WHEEL_PATH}

}


for i in $LIST_MODULES
do
echo "Patch LD_PATH for wheel / python module $i"

patch_python_wheel $i


done


